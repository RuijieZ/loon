
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "loon"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "loon-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('loon')
Loading required package: tcltk
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as.graph")
> ### * as.graph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as.graph
> ### Title: Convert a loongraph object to an object of class graph
> ### Aliases: as.graph
> 
> ### ** Examples
> 
> library(graph)
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min


Attaching package: ‘graph’

The following object is masked from ‘package:loon’:

    complement

> g <- loongraph(letters[1:4], letters[1:3], letters[2:4], FALSE)
> g1 <- as.graph(g) 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as.graph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:graph’, ‘package:BiocGenerics’, ‘package:parallel’

> nameEx("as.loongraph")
> ### * as.loongraph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as.loongraph
> ### Title: Convert a graph object to a loongraph object
> ### Aliases: as.loongraph
> 
> ### ** Examples
> 
> library(graph)
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min


Attaching package: ‘graph’

The following object is masked from ‘package:loon’:

    complement

> graph_graph  = randomEGraph(LETTERS[1:15], edges=100)
> 
> loon_graph <- as.loongraph(graph_graph)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as.loongraph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:graph’, ‘package:BiocGenerics’, ‘package:parallel’

> nameEx("color_loon")
> ### * color_loon
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: color_loon
> ### Title: Create a palette with loon's color mapping
> ### Aliases: color_loon
> 
> ### ** Examples
> 
> 
> pal <- color_loon()
> pal(letters[1:4]) 
[1] "#68B2ED" "#CDA64D" "#EF8AC9" "#1EC28B"
> pal(c('a','a','b','c'))
[1] "#68B2ED" "#68B2ED" "#CDA64D" "#EF8AC9"
> pal(c('green', 'yellow'))
[1] "#008000" "#FFFF00"
> 
> # show color choices for different n's
> library(grid)
> grid.newpage()
> pushViewport(plotViewport())
> grid.rect()
> n <- 2^(1:5)
> pushViewport(dataViewport(xscale=c(0, max(n)+1), yscale=c(0, length(n)+1)))
> grid.yaxis(at=c(1:length(n)), label=paste("n =", n))
> for (i in rev(seq_along(n))) {
+  cols <- pal(1:n[i])
+  grid.points(x = 1:n[i], y = rep(i, n[i]), default.units = "native", pch=15, gp=gpar(col=cols))
+ }
> grid.text("note the fist i colors are shared for each n" , y=unit(1,"npc")+unit(1, "line"))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("color_loon", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:grid’

> nameEx("completegraph")
> ### * completegraph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: completegraph
> ### Title: Create a complete graph or digraph with a set of nodes
> ### Aliases: completegraph
> 
> ### ** Examples
> 
> g <- loon::completegraph(letters[1:5])
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("completegraph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("graphreduce")
> ### * graphreduce
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: graphreduce
> ### Title: Make each space in a node apprear only once
> ### Aliases: graphreduce
> 
> ### ** Examples
> 
> G <- completegraph(nodes=LETTERS[1:4])
> LG <- linegraph(G)
> 
> LLG <- linegraph(LG)
> 
> graphreduce(LLG)
$nodes
[1] "A:B:C" "A:B:D" "A:C:D" "B:C:D"

$from
 [1] "A:B:C" "A:B:C" "A:B:C" "A:B:D" "A:B:D" "A:B:C" "A:B:D" "A:C:D" "A:C:D"
[10] "B:C:D"

$to
 [1] "A:B:D" "A:B:C" "A:C:D" "A:B:D" "A:C:D" "B:C:D" "B:C:D" "A:C:D" "B:C:D"
[10] "B:C:D"

$isDirected
[1] FALSE

attr(,"class")
[1] "loongraph"
> 
> ## Not run: 
> ##D library(Rgraphviz)  
> ##D plot(graphreduce(LLG))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("graphreduce", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_Rlist2nestedTclList")
> ### * l_Rlist2nestedTclList
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_Rlist2nestedTclList
> ### Title: Convert an R list to a nested Tcl list
> ### Aliases: l_Rlist2nestedTclList
> 
> ### ** Examples
> 
> x <- list(c(1,3,4), c(4,3,2,1), c(4,3,2,5,6))
> l_Rlist2nestedTclList(x)
[1] "{1 3 4} {4 3 2 1} {4 3 2 5 6}"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_Rlist2nestedTclList", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_aspect-set")
> ### * l_aspect-set
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_aspect<-
> ### Title: Set the aspect ratio of a plot
> ### Aliases: l_aspect<-
> 
> ### ** Examples
> 
> p <- with(iris, l_plot(Sepal.Length ~ Sepal.Width, color=Species))
> 
> l_aspect(p)
[1] 0.4562569
> l_aspect(p) <- 1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_aspect-set", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_aspect")
> ### * l_aspect
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_aspect
> ### Title: Query the aspect ratio of a plot
> ### Aliases: l_aspect
> 
> ### ** Examples
> 
> p <- with(iris, l_plot(Sepal.Length ~ Sepal.Width, color=Species))
> 
> l_aspect(p)
[1] 0.4562569
> l_aspect(p) <- 1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_aspect", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_bind_canvas")
> ### * l_bind_canvas
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_bind_canvas
> ### Title: Create a Canvas Binding
> ### Aliases: l_bind_canvas
> 
> ### ** Examples
> 
> # binding for when plot is resized 
> p <- l_plot(iris[,1:2], color=iris$Species)
> 
> printSize <- function(p) {
+     size <- l_size(p)
+     cat(paste('Size of widget ', p, ' is: ',
+               size[1], 'x', size[2], ' pixels\n', sep=''))    
+ }
> 
> l_bind_canvas(p, event='<Configure>', function(W) {printSize(W)})
[1] "canvasBinding0"
> 
> id <- l_bind_canvas_ids(p)
> id
[1] "canvasBinding0"
> 
> l_bind_canvas_get(p, id)
[1] "<Configure>"              "R_call 0x55ec43f65620 %W"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_bind_canvas", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_bind_canvas_get")
> ### * l_bind_canvas_get
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_bind_canvas_get
> ### Title: Get the event pattern and callback Tcl code of a canvas binding
> ### Aliases: l_bind_canvas_get
> 
> ### ** Examples
> 
> # binding for when plot is resized 
> p <- l_plot(iris[,1:2], color=iris$Species)
> 
> printSize <- function(p) {
+     size <- l_size(p)
+     cat(paste('Size of widget ', p, ' is: ',
+               size[1], 'x', size[2], ' pixels\n', sep=''))    
+ }
> 
> l_bind_canvas(p, event='<Configure>', function(W) {printSize(W)})
[1] "canvasBinding0"
> 
> id <- l_bind_canvas_ids(p)
> id
[1] "canvasBinding0"
> 
> l_bind_canvas_get(p, id)
[1] "<Configure>"              "R_call 0x55ec4409ce20 %W"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_bind_canvas_get", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_bind_canvas_ids")
> ### * l_bind_canvas_ids
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_bind_canvas_ids
> ### Title: List canvas binding ids
> ### Aliases: l_bind_canvas_ids
> 
> ### ** Examples
> 
> # binding for when plot is resized 
> p <- l_plot(iris[,1:2], color=iris$Species)
> 
> printSize <- function(p) {
+     size <- l_size(p)
+     cat(paste('Size of widget ', p, ' is: ',
+               size[1], 'x', size[2], ' pixels\n', sep=''))    
+ }
> 
> l_bind_canvas(p, event='<Configure>', function(W) {printSize(W)})
[1] "canvasBinding0"
> 
> id <- l_bind_canvas_ids(p)
> id
[1] "canvasBinding0"
> 
> l_bind_canvas_get(p, id)
[1] "<Configure>"              "R_call 0x55ec441dcfd8 %W"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_bind_canvas_ids", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_cget")
> ### * l_cget
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_cget
> ### Title: Query a Plot State
> ### Aliases: l_cget [.loon
> 
> ### ** Examples
> 
> p <- l_plot(iris, color = iris$Species)
> l_cget(p, "color")
  [1] "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED"
  [5] "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED"
  [9] "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED"
 [13] "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED"
 [17] "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED"
 [21] "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED"
 [25] "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED"
 [29] "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED"
 [33] "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED"
 [37] "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED"
 [41] "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED"
 [45] "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED" "#6868B2B2EDED"
 [49] "#6868B2B2EDED" "#6868B2B2EDED" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
 [53] "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
 [57] "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
 [61] "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
 [65] "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
 [69] "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
 [73] "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
 [77] "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
 [81] "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
 [85] "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
 [89] "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
 [93] "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
 [97] "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D" "#CDCDA6A64D4D"
[101] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
[105] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
[109] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
[113] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
[117] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
[121] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
[125] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
[129] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
[133] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
[137] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
[141] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
[145] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
[149] "#EFEF8A8AC9C9" "#EFEF8A8AC9C9"
> p['selected']
  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
 [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[145] FALSE FALSE FALSE FALSE FALSE FALSE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_cget", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_configure")
> ### * l_configure
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_configure
> ### Title: Modify one or multiple plot states
> ### Aliases: l_configure [<-.loon
> 
> ### ** Examples
> 
> p <- l_plot(iris, color = iris$Species)
> l_configure(p, color='red')
> p['size'] <- ifelse(iris$Species == "versicolor", 2, 8)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_configure", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_context_add_slicing2d")
> ### * l_context_add_slicing2d
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_context_add_slicing2d
> ### Title: Create a slicind2d navigator context
> ### Aliases: l_context_add_slicing2d
> 
> ### ** Examples
> 
> names(oliveAcids) <- c('p','p1','s','o','l','l1','a','e')
> nodes <- apply(combn(names(oliveAcids),2),2,
+               function(x)paste(x, collapse=':'))
> G <- completegraph(nodes)
> g <- l_graph(G)
> nav <- l_navigator_add(g)
> con <- l_context_add_slicing2d(nav, data=oliveAcids)
> 
> # symmetric range proportion around nav['proportion']
> con['proportion'] <- 0.2
> 
> con['conditioning4d'] <- "union"
> con['conditioning4d'] <- "intersection"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_context_add_slicing2d", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_create_handle")
> ### * l_create_handle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_create_handle
> ### Title: Create a loon object handle
> ### Aliases: l_create_handle
> 
> ### ** Examples
> 
> 
> # plot handle
> p <- l_plot(x=1:3, y=1:3)
> p_new <- l_create_handle(unclass(p))
> p_new['showScales']
[1] FALSE
> 
> # glyph handle
> gl <- l_glyph_add_text(p, text=LETTERS[1:3])
> gl_new <- l_create_handle(c(as.vector(p), as.vector(gl)))
> gl_new['text']
[1] "A" "B" "C"
> 
> # layer handle
> l <- l_layer_rectangle(p, x=c(1,3), y=c(1,3), color='yellow', index='end')
> l_new <- l_create_handle(c(as.vector(p), as.vector(l)))
> l_new['color']
[1] "#FFFFFFFF0000"
> 
> # navigator handle
> g <- l_graph(linegraph(completegraph(LETTERS[1:3])))
> nav <- l_navigator_add(g)
> nav_new <- l_create_handle(c(as.vector(g), as.vector(nav)))
> nav_new['from']
[1] "A:B"
> 
> # context handle
> con <- l_context_add_context2d(nav)
> con_new <- l_create_handle(c(as.vector(g), as.vector(nav), as.vector(con)))
> con_new['separator']
[1] ":"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_create_handle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_currentindex")
> ### * l_currentindex
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_currentindex
> ### Title: Get layer-relative index of the item below the mouse cursor
> ### Aliases: l_currentindex
> 
> ### ** Examples
> 
> p <- l_plot(iris[,1:2], color=iris$Species)
> 
> printEntered <- function(W) {
+     cat(paste('Entered point ', l_currentindex(W), '\n'))
+ }
> 
> printLeave <- function(W) {
+     cat(paste('Left point ', l_currentindex(W), '\n'))
+ }
> 
> l_bind_item(p, tags='model&&point', event='<Enter>',
+             callback=function(W) {printEntered(W)})
[1] "itemBinding0"
> 
> l_bind_item(p, tags='model&&point', event='<Leave>',
+             callback=function(W) {printLeave(W)})
[1] "itemBinding1"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_currentindex", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_currenttags")
> ### * l_currenttags
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_currenttags
> ### Title: Get tags of the item below the mouse cursor
> ### Aliases: l_currenttags
> 
> ### ** Examples
> 
> printTags <- function(W) {
+     print(l_currenttags(W))
+ }
> 
> p <- l_plot(x=1:3, y=1:3, title='Query Visual Item Tags')
> 
> l_bind_item(p, 'all', '<ButtonPress>', function(W)printTags(W))
[1] "itemBinding0"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_currenttags", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_glyph_add")
> ### * l_glyph_add
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_glyph_add
> ### Title: Add non-primitive glyphs to a scatterplot or graph display
> ### Aliases: l_glyph_add
> 
> ### ** Examples
> 
> # Simple Example with Text Glyphs
> p <- with(olive, l_plot(stearic, eicosenoic, color=Region))
> g <- l_glyph_add_text(p, text=olive$Area, label="Area")
> p['glyph'] <- g
> 
> ## Not run: 
> ##D demo("l_glyphs", package="loon")
> ## End(Not run)
> 
> # create a plot that demonstrates the primitive glyphs and the text glyphs
> p <- l_plot(x=1:15, y=rep(0,15), size=10, showLabels=FALSE)
> text_glyph <- l_glyph_add_text(p, text=letters [1:15])
> p['glyph'] <- c(
+     'circle', 'ocircle', 'ccircle',
+     'square', 'osquare' , 'csquare',
+     'triangle', 'otriangle', 'ctriangle',
+     'diamond', 'odiamond', 'cdiamond',
+     rep(text_glyph, 3)
+ )
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_glyph_add", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_glyph_add_image")
> ### * l_glyph_add_image
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_glyph_add_image
> ### Title: Add an image glyphs
> ### Aliases: l_glyph_add_image
> 
> ### ** Examples
> 
> ## Not run: 
> ##D p <- with(olive, l_plot(palmitic ~ stearic, color = Region))
> ##D img_paths <- list.files(file.path(find.package(package = 'loon'), "images"), full.names = TRUE)
> ##D imgs <- setNames(l_image_import_files(img_paths),
> ##D                  tools::file_path_sans_ext(basename(img_paths)))
> ##D i <- pmatch(gsub("^[[:alpha:]]+-","", olive$Area), names(imgs), duplicates.ok = TRUE)
> ##D 
> ##D g <- l_glyph_add_image(p, imgs[i], label="Flags")
> ##D p['glyph'] <- g
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_glyph_add_image", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_glyph_add_pointrange")
> ### * l_glyph_add_pointrange
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_glyph_add_pointrange
> ### Title: Add a Pointrange Glyph
> ### Aliases: l_glyph_add_pointrange
> 
> ### ** Examples
> 
> p <- l_plot(x = 1:3, color = c('red', 'blue', 'green'), showScales=TRUE)
> g <- l_glyph_add_pointrange(p, ymin=(1:3)-(1:3)/5, ymax=(1:3)+(1:3)/5)
> p['glyph'] <- g
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_glyph_add_pointrange", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_glyph_add_polygon")
> ### * l_glyph_add_polygon
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_glyph_add_polygon
> ### Title: Add a Polygon Glyph
> ### Aliases: l_glyph_add_polygon
> 
> ### ** Examples
> 
> x_star <- 
+     c(-0.000864304235090734, 0.292999135695765, 0.949870354364736, 
+       0.474503025064823, 0.586862575626621, -0.000864304235090734, 
+       -0.586430423509075, -0.474070872947277, -0.949438202247191,
+       -0.29256698357822)
> y_star <-
+     c(-1, -0.403630077787381, -0.308556611927398, 0.153846153846154, 
+       0.808556611927398, 0.499567847882455, 0.808556611927398,
+       0.153846153846154, -0.308556611927398, -0.403630077787381)
> x_cross <- 
+     c(-0.258931143762604, -0.258931143762604, -0.950374531835206, 
+       -0.950374531835206, -0.258931143762604, -0.258931143762604,
+       0.259651397291847, 0.259651397291847, 0.948934024776722,
+       0.948934024776722, 0.259651397291847, 0.259651397291847)
> y_cross <-
+     c(-0.950374531835206, -0.258931143762604, -0.258931143762604, 
+       0.259651397291847, 0.259651397291847, 0.948934024776722,
+       0.948934024776722, 0.259651397291847, 0.259651397291847,
+       -0.258931143762604, -0.258931143762604, -0.950374531835206)
> x_hexagon <-
+     c(0.773552290406223, 0, -0.773552290406223, -0.773552290406223, 
+       0, 0.773552290406223)
> y_hexagon <- 
+     c(0.446917314894843, 0.894194756554307, 0.446917314894843,
+       -0.447637568424085, -0.892754249495822, -0.447637568424085)
> 
> p <- l_plot(1:3, 1:3)
> 
> gl <- l_glyph_add_polygon(p, x = list(x_star, x_cross, x_hexagon),
+                           y = list(y_star, y_cross, y_hexagon))
> 
> p['glyph'] <- gl
> 
> gl['showArea'] <- FALSE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_glyph_add_polygon", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_glyph_add_serialaxes")
> ### * l_glyph_add_serialaxes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_glyph_add_serialaxes
> ### Title: Add a Serialaxes Glyph
> ### Aliases: l_glyph_add_serialaxes
> 
> ### ** Examples
> 
> p <- with(olive, l_plot(oleic, stearic, color=Area))
> gs <- l_glyph_add_serialaxes(p, data=olive[,-c(1,2)], showArea=FALSE)
> p['glyph'] <- gs
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_glyph_add_serialaxes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_glyph_add_text")
> ### * l_glyph_add_text
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_glyph_add_text
> ### Title: Add a Text Glyph
> ### Aliases: l_glyph_add_text
> 
> ### ** Examples
> 
> p <- l_plot(iris, color = iris$Species)
> g <- l_glyph_add_text(p, iris$Species, "test_label")
> p['glyph'] <- g
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_glyph_add_text", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_glyph_relabel")
> ### * l_glyph_relabel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_glyph_relabel
> ### Title: Relabel Glyph
> ### Aliases: l_glyph_relabel
> 
> ### ** Examples
> 
> p <- l_plot(iris, color = iris$Species)
> g <- l_glyph_add_text(p, iris$Species, "test_label")
> p['glyph'] <- g
> l_glyph_relabel(p, g, "Species")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_glyph_relabel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_glyphs_inspector")
> ### * l_glyphs_inspector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_glyphs_inspector
> ### Title: Create a Glyphs Inspector
> ### Aliases: l_glyphs_inspector
> 
> ### ** Examples
> 
> i <- l_glyphs_inspector()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_glyphs_inspector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_glyphs_inspector_image")
> ### * l_glyphs_inspector_image
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_glyphs_inspector_image
> ### Title: Create a Image Glyph Inspector
> ### Aliases: l_glyphs_inspector_image
> 
> ### ** Examples
> 
> i <- l_glyphs_inspector_image()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_glyphs_inspector_image", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_glyphs_inspector_pointrange")
> ### * l_glyphs_inspector_pointrange
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_glyphs_inspector_pointrange
> ### Title: Create a Pointrange Glyph Inspector
> ### Aliases: l_glyphs_inspector_pointrange
> 
> ### ** Examples
> 
> i <- l_glyphs_inspector_pointrange()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_glyphs_inspector_pointrange", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_glyphs_inspector_serialaxes")
> ### * l_glyphs_inspector_serialaxes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_glyphs_inspector_serialaxes
> ### Title: Create a Serialaxes Glyph Inspector
> ### Aliases: l_glyphs_inspector_serialaxes
> 
> ### ** Examples
> 
> i <- l_glyphs_inspector_serialaxes()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_glyphs_inspector_serialaxes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_glyphs_inspector_text")
> ### * l_glyphs_inspector_text
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_glyphs_inspector_text
> ### Title: Create a Text Glyph Inspector
> ### Aliases: l_glyphs_inspector_text
> 
> ### ** Examples
> 
> i <- l_glyphs_inspector_text()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_glyphs_inspector_text", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_graph_inspector")
> ### * l_graph_inspector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_graph_inspector
> ### Title: Create a Graph Inspector
> ### Aliases: l_graph_inspector
> 
> ### ** Examples
> 
> i <- l_graph_inspector()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_graph_inspector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_graph_inspector_analysis")
> ### * l_graph_inspector_analysis
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_graph_inspector_analysis
> ### Title: Create a Graph Analysis Inspector
> ### Aliases: l_graph_inspector_analysis
> 
> ### ** Examples
> 
> i <- l_graph_inspector_analysis()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_graph_inspector_analysis", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_graph_inspector_navigators")
> ### * l_graph_inspector_navigators
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_graph_inspector_navigators
> ### Title: Create a Graph Navigator Inspector
> ### Aliases: l_graph_inspector_navigators
> 
> ### ** Examples
> 
> i <- l_graph_inspector_navigators()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_graph_inspector_navigators", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_help")
> ### * l_help
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_help
> ### Title: Open a browser with loon's documentation webpage
> ### Aliases: l_help
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D l_help()
> ##D l_help("learn_R_display_hist")
> ##D l_help("learn_R_bind")
> ##D # jump to a section
> ##D l_help("learn_R_bind.html#list-reorder-delete-bindings")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_help", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_hexcolor")
> ### * l_hexcolor
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_hexcolor
> ### Title: Convert color names to their 12 digit hexadecimal color
> ###   representation
> ### Aliases: l_hexcolor
> 
> ### ** Examples
> 
> p <- l_plot(1:2)
> p['color'] <- 'red'
> p['color']
[1] "#FFFF00000000" "#FFFF00000000"
> 
> l_hexcolor('red')
[1] "#FFFF00000000"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_hexcolor", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_hist")
> ### * l_hist
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_hist
> ### Title: Create an Interactive Histogram
> ### Aliases: l_hist
> 
> ### ** Examples
> 
> h <- l_hist(iris$Sepal.Length, color=iris$Species)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_hist", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_hist_inspector")
> ### * l_hist_inspector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_hist_inspector
> ### Title: Create a Histogram Inspector
> ### Aliases: l_hist_inspector
> 
> ### ** Examples
> 
> i <- l_hist_inspector()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_hist_inspector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_hist_inspector_analysis")
> ### * l_hist_inspector_analysis
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_hist_inspector_analysis
> ### Title: Create a Histogram Analysis Inspector
> ### Aliases: l_hist_inspector_analysis
> 
> ### ** Examples
> 
> i <- l_hist_inspector_analysis()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_hist_inspector_analysis", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_image_import_array")
> ### * l_image_import_array
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_image_import_array
> ### Title: Import Greyscale Images as Tcl images from an Array
> ### Aliases: l_image_import_array
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # see
> ##D demo("l_ng_images_frey_LLE")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_image_import_array", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_imageviewer")
> ### * l_imageviewer
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_imageviewer
> ### Title: Display Tcl Images in a Simple Image Viewer
> ### Aliases: l_imageviewer
> 
> ### ** Examples
> 
> 
> img2 <- tkimage.create('photo', width=200, height=150)
> tcl(img2, 'put', 'yellow', '-to', 0, 0, 199, 149)
<Tcl>  
> tcl(img2, 'put', 'green', '-to', 40, 20, 130, 40)
<Tcl>  
> img3 <- tkimage.create('photo', width=500, height=100)
> tcl(img3, 'put', 'orange', '-to', 0, 0, 499, 99)
<Tcl>  
> tcl(img3, 'put', 'green', '-to', 40, 80, 350, 95)
<Tcl>  
> 
> l_imageviewer(c(tclvalue(img2), tclvalue(img3)))
[1] "image133" "image134"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_imageviewer", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_info_states")
> ### * l_info_states
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_info_states
> ### Title: Retrieve Information about the States of a Loon Widget
> ### Aliases: l_info_states
> 
> ### ** Examples
> 
> p <- l_plot(iris, linkingGroup="iris")
> i <- l_info_states(p)
> names(i)
 [1] "glyph"            "itemLabel"        "showItemLabels"   "linkingGroup"    
 [5] "linkingKey"       "zoomX"            "zoomY"            "panX"            
 [9] "panY"             "deltaX"           "deltaY"           "xlabel"          
[13] "ylabel"           "title"            "showLabels"       "showScales"      
[17] "swapAxes"         "showGuides"       "background"       "foreground"      
[21] "guidesBackground" "guidelines"       "minimumMargins"   "labelMargins"    
[25] "scalesMargins"    "x"                "y"                "xTemp"           
[29] "yTemp"            "color"            "selected"         "active"          
[33] "size"             "tag"              "useLoonInspector" "selectBy"        
[37] "selectionLogic"  
> i$selectBy
$type
[1] "factor"

$dimension
[1] "1"

$defaultvalue
[1] "sweeping"

$description
[1] "sweeping or brushing: interactive selection method"

> 
> l <- l_layer_rectangle(p, x=range(iris[,1]), y=range(iris[,2]), color="")
> l_info_states(l)
$x
$x$type
[1] "double"

$x$dimension
[1] "n"

$x$defaultvalue
[1] ""

$x$description
[1] "x coordinates"


$y
$y$type
[1] "double"

$y$dimension
[1] "n"

$y$defaultvalue
[1] ""

$y$description
[1] "y coordinates"


$tag
$tag$type
[1] "string"

$tag$dimension
[1] "any"

$tag$defaultvalue
[1] ""

$tag$description
[1] "tags useful for item bindings"


$itemLabel
$itemLabel$type
[1] "string"

$itemLabel$dimension
[1] "any"

$itemLabel$defaultvalue
[1] "item"  "label"

$itemLabel$description
[1] "?"


$color
$color$type
[1] "colorOrTransparent"

$color$dimension
[1] "1"

$color$defaultvalue
[1] ""

$color$description
[1] "fill color of rectangle"


$linecolor
$linecolor$type
[1] "colorOrTransparent"

$linecolor$dimension
[1] "1"

$linecolor$defaultvalue
[1] "steelblue"

$linecolor$description
[1] "outline colors of rectangle"


$linewidth
$linewidth$type
[1] "positive_double"

$linewidth$dimension
[1] "1"

$linewidth$defaultvalue
[1] "1"

$linewidth$description
[1] "linewidth of outline"


> 
> 
> h <- l_hist(iris$Sepal.Length, linkingGroup="iris")
> l_info_states(h)
$linkingGroup
$linkingGroup$type
[1] "string"

$linkingGroup$dimension
[1] "1"

$linkingGroup$defaultvalue
[1] "none"

$linkingGroup$description
[1] "?"


$linkingKey
$linkingKey$type
[1] "?"

$linkingKey$dimension
[1] "-1"

$linkingKey$defaultvalue
[1] "?"

$linkingKey$description
[1] "?"


$zoomX
$zoomX$type
[1] "positive_double"

$zoomX$dimension
[1] "1"

$zoomX$defaultvalue
[1] "1"

$zoomX$description
[1] "Data to plot region mapping is x_pr = (x_data-panX)/deltaX*zoomX if swapAxes=FALSE. The plot region is a plane defined by (0,0) and (1,1)."


$zoomY
$zoomY$type
[1] "positive_double"

$zoomY$dimension
[1] "1"

$zoomY$defaultvalue
[1] "1"

$zoomY$description
[1] "Data to plot region mapping is y_pr = (y_data-panY)/deltaY*zoomY if swapAxes=FALSE. The plot region is a plane defined by (0,0) and (1,1)."


$panX
$panX$type
[1] "double"

$panX$dimension
[1] "1"

$panX$defaultvalue
[1] "0"

$panX$description
[1] "panX is the visible x-axis origin"


$panY
$panY$type
[1] "double"

$panY$dimension
[1] "1"

$panY$defaultvalue
[1] "0"

$panY$description
[1] "panY is the visible y-axis origin"


$deltaX
$deltaX$type
[1] "positive_double"

$deltaX$dimension
[1] "1"

$deltaX$defaultvalue
[1] "1"

$deltaX$description
[1] "Data to plot region mapping is x_pr = (x_data-panX)/deltaX*zoomX if swapAxes=FALSE. The plot region is a plane defined by (0,0) and (1,1)."


$deltaY
$deltaY$type
[1] "positive_double"

$deltaY$dimension
[1] "1"

$deltaY$defaultvalue
[1] "1"

$deltaY$description
[1] "Data to plot region mapping is y_pr = (y_data-panY)/deltaY*zoomY if swapAxes=FALSE. The plot region is a plane defined by (0,0) and (1,1)."


$xlabel
$xlabel$type
[1] "string"

$xlabel$dimension
[1] "1"

$xlabel$defaultvalue
[1] ""

$xlabel$description
[1] "?"


$ylabel
$ylabel$type
[1] "string"

$ylabel$dimension
[1] "1"

$ylabel$defaultvalue
[1] ""

$ylabel$description
[1] "?"


$title
$title$type
[1] "string"

$title$dimension
[1] "1"

$title$defaultvalue
[1] ""

$title$description
[1] "plot title"


$showLabels
$showLabels$type
[1] "boolean"

$showLabels$dimension
[1] "1"

$showLabels$defaultvalue
[1] "TRUE"

$showLabels$description
[1] "boolean to specify whether to display the axes labels and title or not"


$showScales
$showScales$type
[1] "boolean"

$showScales$dimension
[1] "1"

$showScales$defaultvalue
[1] "FALSE"

$showScales$description
[1] "boolean to specify whether to display the scales or not"


$swapAxes
$swapAxes$type
[1] "boolean"

$swapAxes$dimension
[1] "1"

$swapAxes$defaultvalue
[1] "FALSE"

$swapAxes$description
[1] "boolean for swapping the x and y axes"


$showGuides
$showGuides$type
[1] "boolean"

$showGuides$dimension
[1] "1"

$showGuides$defaultvalue
[1] "FALSE"

$showGuides$description
[1] "guides a horizontal and vertical lines for visual guidance"


$background
$background$type
[1] "color"

$background$dimension
[1] "1"

$background$defaultvalue
[1] "white"

$background$description
[1] "background color of plot"


$foreground
$foreground$type
[1] "color"

$foreground$dimension
[1] "1"

$foreground$defaultvalue
[1] "black"

$foreground$description
[1] "foreground color of plot including label, axes and scales color"


$guidesBackground
$guidesBackground$type
[1] "color"

$guidesBackground$dimension
[1] "1"

$guidesBackground$defaultvalue
[1] "gray92"

$guidesBackground$description
[1] "background color if showGuides=TRUE"


$guidelines
$guidelines$type
[1] "color"

$guidelines$dimension
[1] "1"

$guidelines$defaultvalue
[1] "white"

$guidelines$description
[1] "guidelines color"


$minimumMargins
$minimumMargins$type
[1] "positive_integer"

$minimumMargins$dimension
[1] "4"

$minimumMargins$defaultvalue
[1] "20" "20" "20" "20"

$minimumMargins$description
[1] "bottom, left, top, right minimum margin in pixels"


$labelMargins
$labelMargins$type
[1] "positive_integer"

$labelMargins$dimension
[1] "4"

$labelMargins$defaultvalue
[1] "30" "30" "60" "0" 

$labelMargins$description
[1] "bottom, left, top, right margins for labels in pixels"


$scalesMargins
$scalesMargins$type
[1] "positive_integer"

$scalesMargins$dimension
[1] "4"

$scalesMargins$defaultvalue
[1] "30" "80" "0"  "0" 

$scalesMargins$description
[1] "bottom, left, top, right margins for scales in pixels"


$default_ylabels
$default_ylabels$type
[1] "string"

$default_ylabels$dimension
[1] "3"

$default_ylabels$defaultvalue
[1] "Frequency"               "Density"                
[3] "Conditional Probability"

$default_ylabels$description
[1] "?"


$x
$x$type
[1] "double"

$x$dimension
[1] "n"

$x$defaultvalue
[1] ""

$x$description
[1] "data used for binning"


$binwidth
$binwidth$type
[1] "positive_double"

$binwidth$dimension
[1] "1"

$binwidth$defaultvalue
[1] "1"

$binwidth$description
[1] "bin-width used for binning algorithm"


$origin
$origin$type
[1] "double"

$origin$dimension
[1] "1"

$origin$defaultvalue
[1] "0"

$origin$description
[1] "origin used for binning algorithm"


$showBinHandle
$showBinHandle$type
[1] "boolean"

$showBinHandle$dimension
[1] "1"

$showBinHandle$defaultvalue
[1] "TRUE"

$showBinHandle$description
[1] "boolean to specify whether to show the bin-handle or not"


$yshows
$yshows$type
[1] "factor"

$yshows$dimension
[1] "1"

$yshows$defaultvalue
[1] "frequency"

$yshows$description
[1] "either 'frequency' (i.e. counts) or density"


$colorStackingOrder
$colorStackingOrder$type
[1] "?"

$colorStackingOrder$dimension
[1] "-1"

$colorStackingOrder$defaultvalue
[1] "?"

$colorStackingOrder$description
[1] "if showStackedColors=TRUE then the histograms are stacked according to the colors in this list. 'selected' is a keyword and refers to the selected points. If a color is not in this list then their corresponding histograms get stacked according to their order of appearance in the color state."


$showOutlines
$showOutlines$type
[1] "boolean"

$showOutlines$dimension
[1] "1"

$showOutlines$defaultvalue
[1] "TRUE"

$showOutlines$description
[1] "boolean to specify whether to show outlines for histogram bars or not"


$showStackedColors
$showStackedColors$type
[1] "boolean"

$showStackedColors$dimension
[1] "1"

$showStackedColors$defaultvalue
[1] "FALSE"

$showStackedColors$description
[1] "boolean to specify whether the color state should be encoded or not"


$colorFill
$colorFill$type
[1] "color"

$colorFill$dimension
[1] "1"

$colorFill$defaultvalue
[1] "thistle"

$colorFill$description
[1] "if showStackedColors=FALSE then this is the base color used for the histogram bins"


$colorOutline
$colorOutline$type
[1] "color"

$colorOutline$dimension
[1] "1"

$colorOutline$defaultvalue
[1] "black"

$colorOutline$description
[1] "if showOutlines=TRUE then this color is used as the outline color"


$color
$color$type
[1] "color"

$color$dimension
[1] "n"

$color$defaultvalue
[1] "steelblue"

$color$description
[1] "colors of the points"


$selected
$selected$type
[1] "boolean"

$selected$dimension
[1] "n"

$selected$defaultvalue
[1] "FALSE"

$selected$description
[1] "selected points are highlighted and can be modified with the inspector"


$active
$active$type
[1] "boolean"

$active$dimension
[1] "n"

$active$defaultvalue
[1] "TRUE"

$active$description
[1] "active points get included in the binning, inactive ones do not"


$selectBy
$selectBy$type
[1] "factor"

$selectBy$dimension
[1] "1"

$selectBy$defaultvalue
[1] "sweeping"

$selectBy$description
[1] "sweeping or brushing: interactive selection method"


$selectionLogic
$selectionLogic$type
[1] "factor"

$selectionLogic$dimension
[1] "1"

$selectionLogic$defaultvalue
[1] "select"

$selectionLogic$description
[1] "select, deselect or invert: logic for selection"


$useLoonInspector
$useLoonInspector$type
[1] "boolean"

$useLoonInspector$dimension
[1] "1"

$useLoonInspector$defaultvalue
[1] "TRUE"

$useLoonInspector$description
[1] "boolean to specify whether to report interaction events to the loon inspector or not"


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_info_states", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer.Line")
> ### * l_layer.Line
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer.Line
> ### Title: Layer line in Line object
> ### Aliases: l_layer.Line
> 
> ### ** Examples
> 
> library(sp)
> library(rworldmap)
### Welcome to rworldmap ###
For a short introduction type : 	 vignette('rworldmap')
> 
> world <- getMap(resolution = "coarse")
> p <- l_plot()
> lmap <- l_layer(p, world, asSingleLayer=TRUE)
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer.Line", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:rworldmap’, ‘package:sp’

> nameEx("l_layer.Lines")
> ### * l_layer.Lines
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer.Lines
> ### Title: Layer lines in Lines object
> ### Aliases: l_layer.Lines
> 
> ### ** Examples
> 
> library(sp)
> library(rworldmap)
### Welcome to rworldmap ###
For a short introduction type : 	 vignette('rworldmap')
> 
> world <- getMap(resolution = "coarse")
> p <- l_plot()
> lmap <- l_layer(p, world, asSingleLayer=TRUE)
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer.Lines", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:rworldmap’, ‘package:sp’

> nameEx("l_layer.Polygon")
> ### * l_layer.Polygon
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer.Polygon
> ### Title: Layer polygon in Polygon object
> ### Aliases: l_layer.Polygon
> 
> ### ** Examples
> 
> library(sp)
> library(rworldmap)
### Welcome to rworldmap ###
For a short introduction type : 	 vignette('rworldmap')
> 
> world <- getMap(resolution = "coarse")
> p <- l_plot()
> lmap <- l_layer(p, world, asSingleLayer=TRUE)
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer.Polygon", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:rworldmap’, ‘package:sp’

> nameEx("l_layer.Polygons")
> ### * l_layer.Polygons
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer.Polygons
> ### Title: Layer polygons in Polygons object
> ### Aliases: l_layer.Polygons
> 
> ### ** Examples
> 
> library(sp)
> library(rworldmap)
### Welcome to rworldmap ###
For a short introduction type : 	 vignette('rworldmap')
> 
> world <- getMap(resolution = "coarse")
> p <- l_plot()
> lmap <- l_layer(p, world, asSingleLayer=TRUE)
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer.Polygons", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:rworldmap’, ‘package:sp’

> nameEx("l_layer")
> ### * l_layer
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer
> ### Title: Loon layers
> ### Aliases: l_layer
> 
> ### ** Examples
> 
> # l_layer is a generic method
> newFoo <- function(x, y, ...) {
+   r <- list(x=x, y=y, ...)
+   class(r) <- 'foo'
+   return(r)
+ }
> 
> l_layer.foo <- function(widget, x) {
+     x$widget <- widget
+     id <- do.call('l_layer_polygon', x)
+     return(id)
+ }
> 
> p <- l_plot()
> 
> obj <- newFoo(x=c(1:6,6:2), y=c(3,1,0,0,1,3,3,5,6,6,5), color='yellow')
> 
> id <- l_layer(p, obj)
> 
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer.SpatialLines")
> ### * l_layer.SpatialLines
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer.SpatialLines
> ### Title: Layer lines in SpatialLines object
> ### Aliases: l_layer.SpatialLines
> 
> ### ** Examples
> 
> library(sp)
> library(rworldmap)
### Welcome to rworldmap ###
For a short introduction type : 	 vignette('rworldmap')
> 
> world <- getMap(resolution = "coarse")
> p <- l_plot()
> lmap <- l_layer(p, world, asSingleLayer=TRUE)
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer.SpatialLines", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:rworldmap’, ‘package:sp’

> nameEx("l_layer.SpatialLinesDataFrame")
> ### * l_layer.SpatialLinesDataFrame
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer.SpatialLinesDataFrame
> ### Title: Layer lines in SpatialLinesDataFrame object
> ### Aliases: l_layer.SpatialLinesDataFrame
> 
> ### ** Examples
> 
> library(sp)
> library(rworldmap)
### Welcome to rworldmap ###
For a short introduction type : 	 vignette('rworldmap')
> 
> world <- getMap(resolution = "coarse")
> p <- l_plot()
> lmap <- l_layer(p, world, asSingleLayer=TRUE)
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer.SpatialLinesDataFrame", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:rworldmap’, ‘package:sp’

> nameEx("l_layer.SpatialPoints")
> ### * l_layer.SpatialPoints
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer.SpatialPoints
> ### Title: Layer points in SpatialPoints object
> ### Aliases: l_layer.SpatialPoints
> 
> ### ** Examples
> 
> library(sp)
> library(rworldmap)
### Welcome to rworldmap ###
For a short introduction type : 	 vignette('rworldmap')
> 
> world <- getMap(resolution = "coarse")
> p <- l_plot()
> lmap <- l_layer(p, world, asSingleLayer=TRUE)
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer.SpatialPoints", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:rworldmap’, ‘package:sp’

> nameEx("l_layer.SpatialPointsDataFrame")
> ### * l_layer.SpatialPointsDataFrame
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer.SpatialPointsDataFrame
> ### Title: Layer points in SpatialPointsDataFrame object
> ### Aliases: l_layer.SpatialPointsDataFrame
> 
> ### ** Examples
> 
> library(sp)
> library(rworldmap)
### Welcome to rworldmap ###
For a short introduction type : 	 vignette('rworldmap')
> 
> world <- getMap(resolution = "coarse")
> p <- l_plot()
> lmap <- l_layer(p, world, asSingleLayer=TRUE)
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer.SpatialPointsDataFrame", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:rworldmap’, ‘package:sp’

> nameEx("l_layer.SpatialPolygons")
> ### * l_layer.SpatialPolygons
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer.SpatialPolygons
> ### Title: Layer polygons in SpatialPolygons object
> ### Aliases: l_layer.SpatialPolygons
> 
> ### ** Examples
> 
> library(sp)
> library(rworldmap)
### Welcome to rworldmap ###
For a short introduction type : 	 vignette('rworldmap')
> 
> world <- getMap(resolution = "coarse")
> p <- l_plot()
> lmap <- l_layer(p, world, asSingleLayer=TRUE)
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer.SpatialPolygons", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:rworldmap’, ‘package:sp’

> nameEx("l_layer.SpatialPolygonsDataFrame")
> ### * l_layer.SpatialPolygonsDataFrame
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer.SpatialPolygonsDataFrame
> ### Title: Layer polygons in SpatialPolygonDataFrame
> ### Aliases: l_layer.SpatialPolygonsDataFrame
> 
> ### ** Examples
> 
> library(sp)
> library(rworldmap)
### Welcome to rworldmap ###
For a short introduction type : 	 vignette('rworldmap')
> 
> world <- getMap(resolution = "coarse")
> p <- l_plot()
> lmap <- l_layer(p, world, asSingleLayer=TRUE)
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer.SpatialPolygonsDataFrame", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:rworldmap’, ‘package:sp’

> nameEx("l_layer.density")
> ### * l_layer.density
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer.density
> ### Title: Layer Method for Kernel Density Estimation
> ### Aliases: l_layer.density
> 
> ### ** Examples
> 
>  
> d <- density(faithful$eruptions, bw = "sj")
> h <- l_hist(x = faithful$eruptions, yshows="density")
> l <- l_layer.density(h, d, color="steelblue", linewidth=3)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer.density", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer.map")
> ### * l_layer.map
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer.map
> ### Title: Add a Map of class map as Drawings to Loon plot
> ### Aliases: l_layer.map
> 
> ### ** Examples
> 
> library(maps)
> canada <- map("world",  "Canada", fill=TRUE, plot=FALSE)
> p <- l_plot()
> l_map <- l_layer(p, canada, asSingleLayer=TRUE)
> l_map['color'] <- ifelse(grepl("lake", canada$names, TRUE), "lightblue", "")
> l_scaleto_layer(p, l_map)
> l_map['active'] <- FALSE
> l_map['active'] <- TRUE
> l_map['tag']
  [1] "Canada:Sable Island"                          
  [2] "Canada:5"                                     
  [3] "Canada:Grand Manan Island"                    
  [4] "Canada:9"                                     
  [5] "Canada:10"                                    
  [6] "Canada:11"                                    
  [7] "Canada:15"                                    
  [8] "Canada:Cape Breton Island"                    
  [9] "Canada:Prince Edward Island"                  
 [10] "Canada:Ile du Cap aux Meule"                  
 [11] "Canada:Merasheen Island"                      
 [12] "Canada:Ile Lameque"                           
 [13] "Canada:22"                                    
 [14] "Canada:Saltspring Island"                     
 [15] "Canada:Galiano Island"                        
 [16] "Canada:27"                                    
 [17] "Canada:Flores Island"                         
 [18] "Canada:New World Island"                      
 [19] "Canada:Fogo Island"                           
 [20] "Canada:Texada Island"                         
 [21] "Canada:Nootka Island"                         
 [22] "Canada:Anticosti Island"                      
 [23] "Canada:Redonda Island"                        
 [24] "Canada:Quadra Island"                         
 [25] "Canada:Bell Island"                           
 [26] "Canada:Vancouver Island"                      
 [27] "Canada:Newfoundland"                          
 [28] "Canada:Calvert Island"                        
 [29] "Canada:40"                                    
 [30] "Canada:Charlton Island"                       
 [31] "Canada:42"                                    
 [32] "Canada:43"                                    
 [33] "Canada:Aristazabal Island"                    
 [34] "Canada:45"                                    
 [35] "Canada:46"                                    
 [36] "Canada:Moresby Island"                        
 [37] "Canada:Princess Royal Island"                 
 [38] "Canada:49"                                    
 [39] "Canada:50"                                    
 [40] "Canada:BC:Banks Island"                       
 [41] "Canada:Porcher Island"                        
 [42] "Canada:Graham Island"                         
 [43] "Canada:54"                                    
 [44] "Canada:55"                                    
 [45] "Canada:56"                                    
 [46] "Canada:Tukarak Island"                        
 [47] "Canada:58"                                    
 [48] "Canada:Belcher Island"                        
 [49] "Canada:60"                                    
 [50] "Canada:61"                                    
 [51] "Canada:62"                                    
 [52] "Canada:63"                                    
 [53] "Canada:64"                                    
 [54] "Canada:65"                                    
 [55] "Canada:66"                                    
 [56] "Canada:67"                                    
 [57] "Canada:Akpatok Island"                        
 [58] "Canada:Smith Island"                          
 [59] "Canada:Resolution Island"                     
 [60] "Canada:71"                                    
 [61] "Canada:Edgell Island"                         
 [62] "Canada:Mansel Island"                         
 [63] "Canada:Loks Land Island"                      
 [64] "Canada:Charles Island"                        
 [65] "Canada:Big Island"                            
 [66] "Canada:Coats Island"                          
 [67] "Canada:Nottingham Island"                     
 [68] "Canada:Salisbury Island"                      
 [69] "Canada:Mill Island"                           
 [70] "Canada:Southampton Island"                    
 [71] "Canada:White Island"                          
 [72] "Canada:Vansittart Island"                     
 [73] "Canada:Winter Island"                         
 [74] "Canada:85"                                    
 [75] "Canada:86"                                    
 [76] "Canada:87"                                    
 [77] "Canada:Chapman Lewes Island:South"            
 [78] "Canada:Air Force Island"                      
 [79] "Canada:90"                                    
 [80] "Canada:Wales Island"                          
 [81] "Canada:Prince Charles Island"                 
 [82] "Canada:93"                                    
 [83] "Canada:Melbourne Island"                      
 [84] "Canada:Foley Island"                          
 [85] "Canada:Jenny Lind Island"                     
 [86] "Canada:Royal Geographical Society Island:West"
 [87] "Canada:Royal Geographical Society Island:East"
 [88] "Canada:99"                                    
 [89] "Canada:100"                                   
 [90] "Canada:Harrison Island"                       
 [91] "Canada:Bray Island"                           
 [92] "Canada:103"                                   
 [93] "Canada:Matty Island"                          
 [94] "Canada:Herschel Island"                       
 [95] "Canada:106"                                   
 [96] "Canada:Koch Island"                           
 [97] "Canada:Jens Munk Island"                      
 [98] "Canada:King William Island"                   
 [99] "Canada:110"                                   
[100] "Canada:Gateshead Island"                      
[101] "Canada"                                       
[102] "Canada:Prescott Island"                       
[103] "Canada:Victoria Island"                       
[104] "Canada:Stefansson Island"                     
[105] "Canada:Bylot Island"                          
[106] "Canada:Baffin Island"                         
[107] "Canada:Prince of Wales Island"                
[108] "Canada:Russell Island"                        
[109] "Canada:Somerset Island"                       
[110] "Canada:Banks Island"                          
[111] "Canada:122"                                   
[112] "Canada:123"                                   
[113] "Canada:Byam Martin Island"                    
[114] "Canada:Cornwallis Island"                     
[115] "Canada:126"                                   
[116] "Canada:127"                                   
[117] "Canada:128"                                   
[118] "Canada:Eglinton Island"                       
[119] "Canada:Coburg Island"                         
[120] "Canada:131"                                   
[121] "Canada:Cameron Island"                        
[122] "Canada:Bathurst Island"                       
[123] "Canada:Helena Island"                         
[124] "Canada:Melville Island"                       
[125] "Canada:North Kent Island"                     
[126] "Canada:Emerald Isle"                          
[127] "Canada:Devon Island"                          
[128] "Canada:Prince Patrick Island"                 
[129] "Canada:140"                                   
[130] "Canada:Lougheed Island"                       
[131] "Canada:Cornwall Island"                       
[132] "Canada:King Christian Island"                 
[133] "Canada:Brock Island"                          
[134] "Canada:Mackenzie King Island"                 
[135] "Canada:146"                                   
[136] "Canada:Borden Island"                         
[137] "Canada:Amund Ringnes Island"                  
[138] "Canada:Ellef Ringnes Island"                  
[139] "Canada:Meighen Island"                        
[140] "Canada:Axel Heiberg Island"                   
[141] "Canada:Ellesmere Island"                      
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer.map", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:maps’

> nameEx("l_layer_bbox")
> ### * l_layer_bbox
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_bbox
> ### Title: Get the bounding box of a layer.
> ### Aliases: l_layer_bbox
> 
> ### ** Examples
> 
> p <- with(iris, l_plot(Sepal.Length ~ Sepal.Width, color=Species))
> l_layer_bbox(p, layer='model')
[1] 2.0 4.3 4.4 7.9
> 
> l <- l_layer_rectangle(p, x=0:1, y=30:31)
> l_layer_bbox(p, l)
[1]  0 30  1 31
> 
> l_layer_bbox(p, 'root')
[1]  0.0  4.3  4.4 31.0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_bbox", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_contourLines")
> ### * l_layer_contourLines
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_contourLines
> ### Title: Layer Contour Lines
> ### Aliases: l_layer_contourLines
> 
> ### ** Examples
> 
> p <- l_plot()
> x <- 10*1:nrow(volcano)
> y <- 10*1:ncol(volcano)
> lcl <- l_layer_contourLines(p, x, y, volcano)
> l_scaleto_world(p)
> 
> library(MASS)
> p1 <- with(iris, l_plot(Sepal.Length~Sepal.Width, color=Species))
> lcl <- with(iris, l_layer_contourLines(p1, MASS::kde2d(Sepal.Width,Sepal.Length)))
> 
> p2 <- with(iris, l_plot(Sepal.Length~Sepal.Width, color=Species))
> layers <- sapply(split(cbind(iris, color=p2['color']), iris$Species), function(dat) {
+      kest <- with(dat, MASS::kde2d(Sepal.Width,Sepal.Length))
+      l_layer_contourLines(p2, kest, color=as.character(dat$color[1]), linewidth=2,
+           label=paste0(as.character(dat$Species[1]), " contours"))
+ })
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_contourLines", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:MASS’

> nameEx("l_layer_delete")
> ### * l_layer_delete
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_delete
> ### Title: Delete a layer
> ### Aliases: l_layer_delete
> 
> ### ** Examples
> 
> p <- l_plot()
> l1 <- l_layer_rectangle(p, x = 0:1, y = 0:1, color='red')
> l_layer_delete(l1)
> 
> l2 <- l_layer_rectangle(p, x = 0:1, y = 0:1, color='yellow')
> l_layer_delete(p,l2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_delete", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_demote")
> ### * l_layer_demote
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_demote
> ### Title: Moves the layer to be a child of its right group layer sibling
> ### Aliases: l_layer_demote
> 
> ### ** Examples
> 
> p <- l_plot()
> 
> g1 <- l_layer_group(p)
> g2 <- l_layer_group(p, parent=g1)
> l1 <- l_layer_oval(p, x=0:1, y=0:1)
> 
> l_layer_printTree(p) 
 layer2
 +layer0
   +layer1
 model
> l_layer_demote(p, l1)
> l_layer_printTree(p)
 +layer0
   layer2
   +layer1
 model
> l_layer_demote(p, l1)
> l_layer_printTree(p)
 +layer0
   +layer1
     layer2
 model
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_demote", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_expunge")
> ### * l_layer_expunge
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_expunge
> ### Title: Delete a layer and all its descendants
> ### Aliases: l_layer_expunge
> 
> ### ** Examples
> 
> 
> p <- l_plot()
> g <- l_layer_group(p)
> l1 <- l_layer_rectangle(p, x=0:1, y=0:1, parent=g, color="", linecolor="orange", linewidth=2)
> l2 <- l_layer_line(p, x=c(0,.5,1), y=c(0,1,0), parent=g, color="blue")
> 
> l_layer_expunge(p, g)
> 
> # or l_layer_expunge(g)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_expunge", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_getChildren")
> ### * l_layer_getChildren
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_getChildren
> ### Title: Get children of a group layer
> ### Aliases: l_layer_getChildren
> 
> ### ** Examples
> 
> p <- l_plot()
> 
> g <- l_layer_group(p)
> l1 <- l_layer_rectangle(p, x=0:1, y=0:1, parent=g)
> l2 <- l_layer_oval(p, x=0:1, y=0:1, color='thistle', parent=g)
> 
> l_layer_getChildren(p, g)
[1] "layer2" "layer1"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_getChildren", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_getLabel")
> ### * l_layer_getLabel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_getLabel
> ### Title: Get layer label.
> ### Aliases: l_layer_getLabel
> 
> ### ** Examples
> 
> p <- l_plot()
> l1 <- l_layer_rectangle(p, x=0:1, y=0:1, label="a rectangle")
> l_layer_getLabel(p, 'model')
        model 
"Scatterplot" 
> l_layer_getLabel(p, l1)
       layer0 
"a rectangle" 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_getLabel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_getParent")
> ### * l_layer_getParent
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_getParent
> ### Title: Get parent layer id of a layer
> ### Aliases: l_layer_getParent
> 
> ### ** Examples
> 
> p <- with(iris, l_plot(Sepal.Length ~ Sepal.Width, color=Species))
> 
> l_layer_getParent(p, 'model')
[1] "root"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_getParent", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_getType")
> ### * l_layer_getType
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_getType
> ### Title: Get layer type
> ### Aliases: l_layer_getType
> 
> ### ** Examples
> 
> p <- l_plot()
> l <- l_layer_rectangle(p, x=0:1, y=0:1)
> l_layer_getType(p, l)
[1] "rectangle"
> l_layer_getType(p, 'model')
[1] "scatterplot"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_getType", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_group")
> ### * l_layer_group
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_group
> ### Title: layer a group node
> ### Aliases: l_layer_group
> 
> ### ** Examples
> 
> p <- l_plot(x=c(1,10,1.5,7,4.3,9,5,2,8),
+              y=c(1,10,7,3,4,3.3,8,3,4),
+              title="Demo Layers")
> 
> id.g <- l_layer_group(p, "A Layer Group")
> id.pts <- l_layer_points(p, x=c(3,6), y=c(4,7), color="red", parent=id.g)
> l_scaleto_layer(p, id.pts) 
> l_configure(id.pts, x=c(-5,5,12), y=c(-2,-5,18), color="lightgray")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_group", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_groupVisibility")
> ### * l_layer_groupVisibility
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_groupVisibility
> ### Title: Queries visibility status of decendants
> ### Aliases: l_layer_groupVisibility
> 
> ### ** Examples
> 
> 
> p <- l_plot()
> 
> g <- l_layer_group(p)
> l1 <- l_layer_rectangle(p, x=0:1, y=0:1, parent=g)
> l2 <- l_layer_oval(p, x=0:1, y=0:1, parent=g)
> 
> l_layer_groupVisibility(p, g)
[1] "all"
> l_layer_hide(p, l2)
> l_layer_groupVisibility(p, g)
[1] "part"
> l_layer_hide(p, l1)
> l_layer_groupVisibility(p, g)
[1] "none"
> l_layer_hide(p, g)
> l_layer_groupVisibility(p, g)
[1] "none"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_groupVisibility", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_heatImage")
> ### * l_layer_heatImage
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_heatImage
> ### Title: Display a Heat Image
> ### Aliases: l_layer_heatImage
> 
> ### ** Examples
> 
> library(MASS)
> kest <- with(iris, MASS::kde2d(Sepal.Width,Sepal.Length))
> image(kest)
> contour(kest, add=TRUE)
> 
> p <- l_plot()
> lcl <- l_layer_contourLines(p, kest, label='contour lines')
> limg <- l_layer_heatImage(p, kest, label='heatmap') 
> l_scaleto_world(p)
> 
> # from examples(image)
> x <- y <- seq(-4*pi, 4*pi, len = 27)
> r <- sqrt(outer(x^2, y^2, "+"))
> p1 <- l_plot()
> l_layer_heatImage(p1, z = z <- cos(r^2)*exp(-r/6), col  = gray((0:32)/32))
loon layer "rectangles" of type rectangles of plot .l61.plot
[1] "layer0"
> l_scaleto_world(p1)
> 
> image(z = z <- cos(r^2)*exp(-r/6), col  = gray((0:32)/32))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_heatImage", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:MASS’

> nameEx("l_layer_hide")
> ### * l_layer_hide
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_hide
> ### Title: Hide a Layer
> ### Aliases: l_layer_hide
> 
> ### ** Examples
> 
> p <- l_plot()
> 
> l <- l_layer_rectangle(p, x=0:1, y=0:1, color="steelblue")
> l_layer_hide(p, l)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_hide", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_ids")
> ### * l_layer_ids
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_ids
> ### Title: List ids of layers in Plot
> ### Aliases: l_layer_ids
> 
> ### ** Examples
> 
> set.seed(500)
> x <- rnorm(30)
> y <- 4 + 3*x + rnorm(30)
> fit <- lm(y~x)
> xseq <- seq(min(x)-1, max(x)+1, length.out = 50)
> fit_line <- predict(fit, data.frame(x=range(xseq)))
> ci <- predict(fit, data.frame(x=xseq), 
+               interval="confidence", level=0.95)
> pi <- predict(fit, data.frame(x=xseq),
+               interval="prediction", level=0.95)
> 
> 
> p <- l_plot(y~x, color='black', showScales=TRUE, showGuides=TRUE)
> gLayer <- l_layer_group(
+     p, label="simple linear regression",
+     parent="root", index="end"
+ )
> fitLayer <- l_layer_line(
+     p, x=range(xseq), y=fit_line, color="#04327F",
+     linewidth=4, label="fit", parent=gLayer
+ )
> ciLayer <- l_layer_polygon(
+     p,
+     x = c(xseq, rev(xseq)), 
+     y = c(ci[,'lwr'], rev(ci[,'upr'])),
+     color = "#96BDFF", linecolor="",
+     label = "95 % confidence interval",
+     parent = gLayer, index='end'
+ )
> piLayer <- l_layer_polygon(
+     p,
+     x = c(xseq, rev(xseq)), 
+     y = c(pi[,'lwr'], rev(pi[,'upr'])),
+     color = "#E2EDFF", linecolor="",
+     label = "95 % prediction interval",
+     parent = gLayer, index='end'
+ )
> 
> l_info_states(piLayer)
$x
$x$type
[1] "double"

$x$dimension
[1] "n"

$x$defaultvalue
[1] ""

$x$description
[1] "x coordinates"


$y
$y$type
[1] "double"

$y$dimension
[1] "n"

$y$defaultvalue
[1] ""

$y$description
[1] "y coordinates"


$tag
$tag$type
[1] "string"

$tag$dimension
[1] "any"

$tag$defaultvalue
[1] ""

$tag$description
[1] "tags useful for item bindings"


$itemLabel
$itemLabel$type
[1] "string"

$itemLabel$dimension
[1] "any"

$itemLabel$defaultvalue
[1] "item"  "label"

$itemLabel$description
[1] "?"


$color
$color$type
[1] "colorOrTransparent"

$color$dimension
[1] "1"

$color$defaultvalue
[1] ""

$color$description
[1] "fill color of polygon"


$linecolor
$linecolor$type
[1] "colorOrTransparent"

$linecolor$dimension
[1] "1"

$linecolor$defaultvalue
[1] "steelblue"

$linecolor$description
[1] "outline color of polygon"


$linewidth
$linewidth$type
[1] "positive_double"

$linewidth$dimension
[1] "1"

$linewidth$defaultvalue
[1] "1"

$linewidth$description
[1] "linewidth of outline"


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_ids", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_isVisible")
> ### * l_layer_isVisible
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_isVisible
> ### Title: Return visibility flag of layer
> ### Aliases: l_layer_isVisible
> 
> ### ** Examples
> 
> p <- l_plot()
> l <- l_layer_rectangle(p, x=0:1, y=0:1)
> l_layer_isVisible(p, l)
[1] TRUE
> l_layer_hide(p, l)
> l_layer_isVisible(p, l)
[1] FALSE
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_isVisible", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_line")
> ### * l_layer_line
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_line
> ### Title: Layer a line
> ### Aliases: l_layer_line
> 
> ### ** Examples
> 
> 
> p <- l_plot()
> l <- l_layer_line(p, x=c(1,2,3,4), y=c(1,3,2,4), color='red', linewidth=2)
> l_scaleto_world(p)
> 
> # object
> p <- l_plot()
> l <- l_layer_line(p, x=nhtemp)
> l_scaleto_layer(l)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_line", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_lines")
> ### * l_layer_lines
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_lines
> ### Title: Layer a lines
> ### Aliases: l_layer_lines
> 
> ### ** Examples
> 
> s <- Filter(function(df)nrow(df) > 1, split(UsAndThem, UsAndThem$Country))
> sUaT <- Map(function(country){country[order(country$Year),]} , s)
> xcoords <- Map(function(x)x$Year, sUaT)
> ycoords <- Map(function(x)x$LifeExpectancy, sUaT)
> region <- sapply(sUaT, function(x)as.character(x$Geographic.Region[1]))
> 
> p <- l_plot(showItemLabels=TRUE)
> l <- l_layer_lines(p, xcoords, ycoords, itemLabel=names(sUaT), color=region)
> l_scaleto_layer(l)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_lines", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_lower")
> ### * l_layer_lower
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_lower
> ### Title: Switch the layer place with its sibling to the right
> ### Aliases: l_layer_lower
> 
> ### ** Examples
> 
> p <- l_plot()
> 
> l1 <- l_layer_rectangle(p, x=0:1, y=0:1)
> l2 <- l_layer_oval(p, x=0:1, y=0:1, color='thistle')
> 
> l_aspect(p) <- 1
> 
> l_layer_lower(p, l2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_lower", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_move")
> ### * l_layer_move
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_move
> ### Title: Move a layer
> ### Aliases: l_layer_move
> 
> ### ** Examples
> 
> p <- l_plot()
> 
> l <- l_layer_rectangle(p, x=0:1, y=0:1, color="steelblue")
> g <- l_layer_group(p)
> l_layer_printTree(p)
 +layer1
 layer0
 model
> 
> l_layer_move(l, parent=g)
> l_layer_printTree(p)
 +layer1
   layer0
 model
> 
> l_layer_move(p, 'model', parent=g)
> l_layer_printTree(p)
 +layer1
   model
   layer0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_move", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_oval")
> ### * l_layer_oval
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_oval
> ### Title: Layer a oval
> ### Aliases: l_layer_oval
> 
> ### ** Examples
> 
> p <- l_plot()
> l <- l_layer_oval(p, c(1,5), c(2,12), color='steelblue')
> l_configure(p, panX=0, panY=0, deltaX=20, deltaY=20)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_oval", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_polygon")
> ### * l_layer_polygon
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_polygon
> ### Title: Layer a polygon
> ### Aliases: l_layer_polygon
> 
> ### ** Examples
> 
> set.seed(500)
> x <- rnorm(30)
> y <- 4 + 3*x + rnorm(30)
> fit <- lm(y~x)
> xseq <- seq(min(x)-1, max(x)+1, length.out = 50)
> fit_line <- predict(fit, data.frame(x=range(xseq)))
> ci <- predict(fit, data.frame(x=xseq), 
+               interval="confidence", level=0.95)
> pi <- predict(fit, data.frame(x=xseq),
+               interval="prediction", level=0.95)
> 
> 
> p <- l_plot(y~x, color='black', showScales=TRUE, showGuides=TRUE)
> gLayer <- l_layer_group(
+     p, label="simple linear regression",
+     parent="root", index="end"
+ )
> fitLayer <- l_layer_line(
+     p, x=range(xseq), y=fit_line, color="#04327F",
+     linewidth=4, label="fit", parent=gLayer
+ )
> ciLayer <- l_layer_polygon(
+     p,
+     x = c(xseq, rev(xseq)), 
+     y = c(ci[,'lwr'], rev(ci[,'upr'])),
+     color = "#96BDFF", linecolor="",
+     label = "95 % confidence interval",
+     parent = gLayer, index='end'
+ )
> piLayer <- l_layer_polygon(
+     p,
+     x = c(xseq, rev(xseq)), 
+     y = c(pi[,'lwr'], rev(pi[,'upr'])),
+     color = "#E2EDFF", linecolor="",
+     label = "95 % prediction interval",
+     parent = gLayer, index='end'
+ )
> 
> l_info_states(piLayer)
$x
$x$type
[1] "double"

$x$dimension
[1] "n"

$x$defaultvalue
[1] ""

$x$description
[1] "x coordinates"


$y
$y$type
[1] "double"

$y$dimension
[1] "n"

$y$defaultvalue
[1] ""

$y$description
[1] "y coordinates"


$tag
$tag$type
[1] "string"

$tag$dimension
[1] "any"

$tag$defaultvalue
[1] ""

$tag$description
[1] "tags useful for item bindings"


$itemLabel
$itemLabel$type
[1] "string"

$itemLabel$dimension
[1] "any"

$itemLabel$defaultvalue
[1] "item"  "label"

$itemLabel$description
[1] "?"


$color
$color$type
[1] "colorOrTransparent"

$color$dimension
[1] "1"

$color$defaultvalue
[1] ""

$color$description
[1] "fill color of polygon"


$linecolor
$linecolor$type
[1] "colorOrTransparent"

$linecolor$dimension
[1] "1"

$linecolor$defaultvalue
[1] "steelblue"

$linecolor$description
[1] "outline color of polygon"


$linewidth
$linewidth$type
[1] "positive_double"

$linewidth$dimension
[1] "1"

$linewidth$defaultvalue
[1] "1"

$linewidth$description
[1] "linewidth of outline"


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_polygon", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_polygons")
> ### * l_layer_polygons
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_polygons
> ### Title: Layer a polygons
> ### Aliases: l_layer_polygons
> 
> ### ** Examples
> 
> 
> p <- l_plot()
> 
> l <- l_layer_polygons(
+      p,
+      x = list(c(1,2,1.5), c(3,4,6,5,2), c(1,3,5,3)),
+      y = list(c(1,1,2), c(1,1.5,1,4,2), c(3,5,6,4)),
+      color = c('red', 'green', 'blue'),
+      linecolor = ""
+ )
> l_scaleto_world(p)
> 
> l_info_states(l, "color")
$color
$color$type
[1] "colorOrTransparent"

$color$dimension
[1] "n"

$color$defaultvalue
[1] ""

$color$description
[1] "fill colors of polygons"


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_polygons", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_printTree")
> ### * l_layer_printTree
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_printTree
> ### Title: Print the layer tree
> ### Aliases: l_layer_printTree
> 
> ### ** Examples
> 
> p <- l_plot()
> l_layer_rectangle(p, x=0:1, y=0:1)
loon layer "rectangle" of type rectangle of plot .l73.plot
[1] "layer0"
> g <- l_layer_group(p)
> l_layer_oval(p, x=0:1, y=0:1, parent=g)
loon layer "oval" of type oval of plot .l73.plot
[1] "layer2"
> l_layer_line(p, x=0:1, y=0:1, parent=g)
loon layer "line" of type line of plot .l73.plot
[1] "layer3"
> l_layer_printTree(p)
 +layer1
   layer3
   layer2
 layer0
 model
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_printTree", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_promote")
> ### * l_layer_promote
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_promote
> ### Title: Moves the layer up to be a left sibling of its parent
> ### Aliases: l_layer_promote
> 
> ### ** Examples
> 
> p <- l_plot()
> 
> g1 <- l_layer_group(p)
> g2 <- l_layer_group(p, parent=g1)
> l1 <- l_layer_oval(p, x=0:1, y=0:1, parent=g2)
> 
> l_layer_printTree(p)
 +layer0
   +layer1
     layer2
 model
> l_layer_promote(p, l1)
> l_layer_printTree(p)
 +layer0
   layer2
   +layer1
 model
> l_layer_promote(p, l1)
> l_layer_printTree(p)
 layer2
 +layer0
   +layer1
 model
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_promote", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_raise")
> ### * l_layer_raise
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_raise
> ### Title: Switch the layer place with its sibling to the left
> ### Aliases: l_layer_raise
> 
> ### ** Examples
> 
> p <- l_plot()
> 
> l1 <- l_layer_rectangle(p, x=0:1, y=0:1)
> l2 <- l_layer_oval(p, x=0:1, y=0:1, color='thistle')
> 
> l_aspect(p) <- 1
> 
> l_layer_raise(p, l1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_raise", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_rasterImage")
> ### * l_layer_rasterImage
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_rasterImage
> ### Title: Layer a Raster Image
> ### Aliases: l_layer_rasterImage
> 
> ### ** Examples
> 
> plot(1,1, xlim = c(0,1), ylim=c(0,1))
> mat <- matrix(c(0,0,0,0, 1,1), ncol=2)
> rasterImage(mat, 0,0,1,1, interpolate = FALSE)
> 
> p <- l_plot()
> l_layer_rasterImage(p, mat, 0,0,1,1)
> l_scaleto_world(p)
> 
> # from examples(rasterImage)
> 
> # set up the plot region:
> op <- par(bg = "thistle")
> plot(c(100, 250), c(300, 450), type = "n", xlab = "", ylab = "")
> image <- as.raster(matrix(0:1, ncol = 5, nrow = 3))
Warning in matrix(0:1, ncol = 5, nrow = 3) :
  data length [2] is not a sub-multiple or multiple of the number of rows [3]
> rasterImage(image, 100, 300, 150, 350, interpolate = FALSE)
> rasterImage(image, 100, 400, 150, 450)
> rasterImage(image, 200, 300, 200 + 10, 300 + 10,
+            interpolate = FALSE)
>            
> p <- l_plot(showScales=TRUE, background="thistle", useLoonInspector=FALSE)
> l_layer_rasterImage(p, image, 100, 300, 150, 350, interpolate = FALSE)
> l_layer_rasterImage(p, image, 100, 400, 150, 450)
> l_layer_rasterImage(p, image, 200, 300, 200 + 10, 300 + 10,
+    interpolate = FALSE)
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_rasterImage", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("l_layer_rectangle")
> ### * l_layer_rectangle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_rectangle
> ### Title: Layer a rectangle
> ### Aliases: l_layer_rectangle
> 
> ### ** Examples
> 
> p <- l_plot()
> l <- l_layer_rectangle(p, x=c(2,3), y=c(1,10), color='steelblue')
> l_scaleto_layer(l)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_rectangle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_rectangles")
> ### * l_layer_rectangles
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_rectangles
> ### Title: Layer a rectangles
> ### Aliases: l_layer_rectangles
> 
> ### ** Examples
> 
> 
> p <- l_plot()
> 
> l <- l_layer_rectangles(
+      p,
+      x = list(c(0,1), c(1,2), c(2,3), c(5,6)),
+      y = list(c(0,1), c(1,2), c(0,1), c(3,4)),
+      color = c('red', 'blue', 'green', 'orange'),
+      linecolor = "black"
+ )
> l_scaleto_world(p)
> 
> l_info_states(l)
$x
$x$type
[1] "nested_double"

$x$dimension
[1] "n"

$x$defaultvalue
[1] ""

$x$description
[1] "x coordinates"


$y
$y$type
[1] "nested_double"

$y$dimension
[1] "n"

$y$defaultvalue
[1] ""

$y$description
[1] "y coordinates"


$tag
$tag$type
[1] "string"

$tag$dimension
[1] "n"

$tag$defaultvalue
[1] ""

$tag$description
[1] "tags useful for item bindings"


$active
$active$type
[1] "boolean"

$active$dimension
[1] "n"

$active$defaultvalue
[1] "TRUE"

$active$description
[1] "if TRUE visual is rendered, otherwise it is not"


$itemLabel
$itemLabel$type
[1] "string"

$itemLabel$dimension
[1] "n"

$itemLabel$defaultvalue
[1] ""

$itemLabel$description
[1] "?"


$color
$color$type
[1] "colorOrTransparent"

$color$dimension
[1] "n"

$color$defaultvalue
[1] "black"

$color$description
[1] "fill color of rectangles"


$linecolor
$linecolor$type
[1] "colorOrTransparent"

$linecolor$dimension
[1] "n"

$linecolor$defaultvalue
[1] ""

$linecolor$description
[1] "outline colors of rectangles"


$linewidth
$linewidth$type
[1] "positive_double"

$linewidth$dimension
[1] "n"

$linewidth$defaultvalue
[1] "1"

$linewidth$description
[1] "linewidths of outlines"


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_rectangles", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_relabel")
> ### * l_layer_relabel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_relabel
> ### Title: Change layer label
> ### Aliases: l_layer_relabel
> 
> ### ** Examples
> 
> p <- l_plot()
> 
> l <- l_layer_rectangle(p, x=0:1, y=0:1, label="A rectangle")
> l_layer_getLabel(p, l)
       layer0 
"A rectangle" 
> 
> l_layer_relabel(p, l, label="A relabelled rectangle")
> l_layer_getLabel(p, l)
                  layer0 
"A relabelled rectangle" 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_relabel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_show")
> ### * l_layer_show
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_show
> ### Title: Show or unhide a Layer
> ### Aliases: l_layer_show
> 
> ### ** Examples
> 
> p <- l_plot()
> 
> l <- l_layer_rectangle(p, x=0:1, y=0:1, color="steelblue")
> l_layer_hide(p, l)
> 
> l_layer_show(p, l)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_show", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_text")
> ### * l_layer_text
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_text
> ### Title: Layer a text
> ### Aliases: l_layer_text
> 
> ### ** Examples
> 
> p <- l_plot()
> l <- l_layer_text(p, 0, 0, "Hello World")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_text", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layer_texts")
> ### * l_layer_texts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layer_texts
> ### Title: Layer a texts
> ### Aliases: l_layer_texts
> 
> ### ** Examples
> 
> p <- l_plot()
> l <- l_layer_texts(p, x=1:3, y=3:1, text=c("This is", "a", "test"), size=20)
> l_scaleto_world(p)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layer_texts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_layers_inspector")
> ### * l_layers_inspector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_layers_inspector
> ### Title: Create a Layers Inspector
> ### Aliases: l_layers_inspector
> 
> ### ** Examples
> 
> i <- l_layers_inspector()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_layers_inspector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_loon_inspector")
> ### * l_loon_inspector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_loon_inspector
> ### Title: Create a loon linspector
> ### Aliases: l_loon_inspector
> 
> ### ** Examples
> 
> i <- l_loon_inspector()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_loon_inspector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_navgraph")
> ### * l_navgraph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_navgraph
> ### Title: Explore a dataset with the canonical 2d navigation graph setting
> ### Aliases: l_navgraph
> 
> ### ** Examples
> 
> ng <- l_navgraph(oliveAcids, color=olive$Area)
> ng2 <- l_navgraph(oliveAcids, separator='-', color=olive$Area)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_navgraph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_nestedTclList2Rlist")
> ### * l_nestedTclList2Rlist
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_nestedTclList2Rlist
> ### Title: Convert a Nested Tcl List to an R List
> ### Aliases: l_nestedTclList2Rlist
> 
> ### ** Examples
> 
> 
> tclobj <- .Tcl('set a {{1 2 3} {2 3 4 4} {3 5 3 3}}')
> l_nestedTclList2Rlist(tclobj)
[[1]]
[1] 1 2 3

[[2]]
[1] 2 3 4 4

[[3]]
[1] 3 5 3 3

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_nestedTclList2Rlist", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_ng_plots.default")
> ### * l_ng_plots.default
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_ng_plots.default
> ### Title: Select 2d spaces with variable associated measures displayed in
> ###   scatterplot matrix
> ### Aliases: l_ng_plots.default
> 
> ### ** Examples
> 
> n <- 100
> dat <- data.frame(
+    A = rnorm(n), B = rnorm(n), C = rnorm(n),
+    D = rnorm(n), E = rnorm(n)
+ )
> m2d <- data.frame(
+     cov = with(dat, c(cov(A,B), cov(A,C), cov(B,D), cov(D,E), cov(A,E))),
+     measure_1 = c(1, 3, 2, 1, 4),
+     row.names = c('A:B', 'A:C', 'B:D', 'D:E', 'A:E')
+ )
> 
> # or m2d <- as.matrix(m2d)
> 
> nav <- l_ng_plots(measures=m2d, data=dat)
> 
> # only one measure
> m <- m2d[,1]
> names(m) <- row.names(m2d)
> nav <- l_ng_plots(measures=m, data=dat)
> 
> m2d[c(1,2),1]
[1] -0.0008554794  0.0170766216
> 
> # one d measures
> m1d <- data.frame(
+      mean = sapply(dat, mean),
+      median =  sapply(dat, median),
+      sd =  sapply(dat, sd),
+      q1 = sapply(dat, function(x)quantile(x, probs=0.25)),
+      q3 = sapply(dat, function(x)quantile(x, probs=0.75)),
+      row.names = names(dat)
+ )
> 
> nav <- l_ng_plots(m1d, dat) 
> 
> ## more involved
> q1 <- function(x)as.vector(quantile(x, probs=0.25))
> 
> # be carful that the vector names are correct
> nav <- l_ng_plots(sapply(oliveAcids, q1), oliveAcids)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_ng_plots.default", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_ng_plots.measures")
> ### * l_ng_plots.measures
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_ng_plots.measures
> ### Title: 2d Navigation Graph Setup with dynamic node fitering using a
> ###   scatterplot matrix
> ### Aliases: l_ng_plots.measures
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # 2d measures
> ##D scags <- scagnostics2d(oliveAcids, separator='**')
> ##D scags()
> ##D ng <- l_ng_plots(scags, color=olive$Area)
> ##D 
> ##D # 1d measures
> ##D scale01 <- function(x){(x-min(x))/diff(range(x))}
> ##D m1d <- measures1d(sapply(iris[,-5], scale01),
> ##D      mean=mean, median=median, sd=sd,
> ##D      q1=function(x)as.vector(quantile(x, probs=0.25)),
> ##D      q3=function(x)as.vector(quantile(x, probs=0.75)))
> ##D 
> ##D m1d()
> ##D 
> ##D nav <- l_ng_plots(m1d, color=iris$Species)
> ##D 
> ##D # with only one measure
> ##D nav <- l_ng_plots(measures1d(oliveAcids, sd))
> ##D 
> ##D # with two measures
> ##D nav <- l_ng_plots(measures1d(oliveAcids, sd=sd, mean=mean))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_ng_plots.measures", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_ng_plots.scagnostics")
> ### * l_ng_plots.scagnostics
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_ng_plots.scagnostics
> ### Title: 2d Navigation Graph Setup with dynamic node fitering based on
> ###   scagnostic measures and by using a scatterplot matrix
> ### Aliases: l_ng_plots.scagnostics
> 
> ### ** Examples
> 
> 
> library(scagnostics)
Loading required package: rJava
> scags <- scagnostics(oliveAcids)
> 
> l_ng_plots(scags, oliveAcids, color=olive$Area)
$plots
$plots$x2y1
[1] ".l96.pairs.plot"
attr(,"class")
[1] "loon"

$plots$x3y1
[1] ".l96.pairs.plot1"
attr(,"class")
[1] "loon"

$plots$x4y1
[1] ".l96.pairs.plot2"
attr(,"class")
[1] "loon"

$plots$x5y1
[1] ".l96.pairs.plot3"
attr(,"class")
[1] "loon"

$plots$x6y1
[1] ".l96.pairs.plot4"
attr(,"class")
[1] "loon"

$plots$x7y1
[1] ".l96.pairs.plot5"
attr(,"class")
[1] "loon"

$plots$x8y1
[1] ".l96.pairs.plot6"
attr(,"class")
[1] "loon"

$plots$x9y1
[1] ".l96.pairs.plot7"
attr(,"class")
[1] "loon"

$plots$x3y2
[1] ".l96.pairs.plot8"
attr(,"class")
[1] "loon"

$plots$x4y2
[1] ".l96.pairs.plot9"
attr(,"class")
[1] "loon"

$plots$x5y2
[1] ".l96.pairs.plot10"
attr(,"class")
[1] "loon"

$plots$x6y2
[1] ".l96.pairs.plot11"
attr(,"class")
[1] "loon"

$plots$x7y2
[1] ".l96.pairs.plot12"
attr(,"class")
[1] "loon"

$plots$x8y2
[1] ".l96.pairs.plot13"
attr(,"class")
[1] "loon"

$plots$x9y2
[1] ".l96.pairs.plot14"
attr(,"class")
[1] "loon"

$plots$x4y3
[1] ".l96.pairs.plot15"
attr(,"class")
[1] "loon"

$plots$x5y3
[1] ".l96.pairs.plot16"
attr(,"class")
[1] "loon"

$plots$x6y3
[1] ".l96.pairs.plot17"
attr(,"class")
[1] "loon"

$plots$x7y3
[1] ".l96.pairs.plot18"
attr(,"class")
[1] "loon"

$plots$x8y3
[1] ".l96.pairs.plot19"
attr(,"class")
[1] "loon"

$plots$x9y3
[1] ".l96.pairs.plot20"
attr(,"class")
[1] "loon"

$plots$x5y4
[1] ".l96.pairs.plot21"
attr(,"class")
[1] "loon"

$plots$x6y4
[1] ".l96.pairs.plot22"
attr(,"class")
[1] "loon"

$plots$x7y4
[1] ".l96.pairs.plot23"
attr(,"class")
[1] "loon"

$plots$x8y4
[1] ".l96.pairs.plot24"
attr(,"class")
[1] "loon"

$plots$x9y4
[1] ".l96.pairs.plot25"
attr(,"class")
[1] "loon"

$plots$x6y5
[1] ".l96.pairs.plot26"
attr(,"class")
[1] "loon"

$plots$x7y5
[1] ".l96.pairs.plot27"
attr(,"class")
[1] "loon"

$plots$x8y5
[1] ".l96.pairs.plot28"
attr(,"class")
[1] "loon"

$plots$x9y5
[1] ".l96.pairs.plot29"
attr(,"class")
[1] "loon"

$plots$x7y6
[1] ".l96.pairs.plot30"
attr(,"class")
[1] "loon"

$plots$x8y6
[1] ".l96.pairs.plot31"
attr(,"class")
[1] "loon"

$plots$x9y6
[1] ".l96.pairs.plot32"
attr(,"class")
[1] "loon"

$plots$x8y7
[1] ".l96.pairs.plot33"
attr(,"class")
[1] "loon"

$plots$x9y7
[1] ".l96.pairs.plot34"
attr(,"class")
[1] "loon"

$plots$x9y8
[1] ".l96.pairs.plot35"
attr(,"class")
[1] "loon"


$graph
[1] ".l95.graph"
attr(,"class")
[1] "loon"

$plot
[1] ".loon_10.plot"
attr(,"class")
[1] "loon"

$navigator
[1] "navigator0"
attr(,"class")
[1] "loon"        "l_navigator"
attr(,"widget")
[1] ".l95.graph"

$context
[1] "context0"
attr(,"widget")
[1] ".l95.graph"
attr(,"navigator")
[1] "navigator0"
attr(,"class")
[1] "loon"      "l_context"
attr(,"plot")
[1] ".loon_10.plot"
attr(,"class")
[1] "loon"

$env
<environment: 0x55ec405bc4a0>

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_ng_plots.scagnostics", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:scagnostics’, ‘package:rJava’

> nameEx("l_ng_ranges.default")
> ### * l_ng_ranges.default
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_ng_ranges.default
> ### Title: Select 2d spaces with variable associated measures using a
> ###   slider
> ### Aliases: l_ng_ranges.default
> 
> ### ** Examples
> 
> # Simple example with generated data
> n <- 100
> dat <- data.frame(
+    A = rnorm(n), B = rnorm(n), C = rnorm(n),
+    D = rnorm(n), E = rnorm(n)
+ )
> m2d <- data.frame(
+     cor = with(dat, c(cor(A,B), cor(A,C), cor(B,D), cor(D,E), cor(A,E))),
+     my_measure = c(1, 3, 2, 1, 4),
+     row.names = c('A:B', 'A:C', 'B:D', 'D:E', 'A:E')
+ )
> 
> # or m2d <- as.matrix(m2d)
> 
> nav <- l_ng_ranges(measures=m2d, data=dat)
> 
> # With 1d measures
> m1d <- data.frame(
+      mean = sapply(dat, mean),
+      median =  sapply(dat, median),
+      sd =  sapply(dat, sd),
+      q1 = sapply(dat, function(x)quantile(x, probs=0.25)),
+      q3 = sapply(dat, function(x)quantile(x, probs=0.75)),
+      row.names = names(dat)
+ )
> 
> nav <- l_ng_ranges(m1d, dat) 
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_ng_ranges.default", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_ng_ranges.measures")
> ### * l_ng_ranges.measures
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_ng_ranges.measures
> ### Title: 2d Navigation Graph Setup with dynamic node fitering using a
> ###   slider
> ### Aliases: l_ng_ranges.measures
> 
> ### ** Examples
> 
> # 2d measures
> # s <- scagnostics2d(oliveAcids)
> # nav <- l_ng_ranges(s, color=olive$Area)
> 
> # 1d measures
> scale01 <- function(x){(x-min(x))/diff(range(x))}
> m1d <- measures1d(sapply(iris[,-5], scale01),
+      mean=mean, median=median, sd=sd,
+      q1=function(x)as.vector(quantile(x, probs=0.25)),
+      q3=function(x)as.vector(quantile(x, probs=0.75)))
> 
> m1d()
                  mean    median        sd         q1        q3
Sepal.Length 0.4287037 0.4166667 0.2300184 0.22222222 0.5833333
Sepal.Width  0.4405556 0.4166667 0.1816110 0.33333333 0.5416667
Petal.Length 0.4674576 0.5677966 0.2992031 0.10169492 0.6949153
Petal.Width  0.4580556 0.5000000 0.3175990 0.08333333 0.7083333
> 
> nav <- l_ng_ranges(m1d, color=iris$Species)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_ng_ranges.measures", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_ng_ranges.scagnostics")
> ### * l_ng_ranges.scagnostics
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_ng_ranges.scagnostics
> ### Title: 2d Navigation Graph Setup with dynamic node fitering based on
> ###   scagnostic measures and using a slider
> ### Aliases: l_ng_ranges.scagnostics
> 
> ### ** Examples
> 
> library(scagnostics)
Loading required package: rJava
> s <- scagnostics(oliveAcids)
> ng <- l_ng_ranges(s, oliveAcids, color=olive$Area)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_ng_ranges.scagnostics", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:scagnostics’, ‘package:rJava’

> nameEx("l_pairs")
> ### * l_pairs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_pairs
> ### Title: Scatterplot Matrix in Loon
> ### Aliases: l_pairs
> 
> ### ** Examples
> 
> p <- l_pairs(iris[,-5], color=iris$Species)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_pairs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_plot")
> ### * l_plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_plot
> ### Title: Create an interactive loon plot widget
> ### Aliases: l_plot
> 
> ### ** Examples
> 
> # ordinary use
> p <- with(iris, l_plot(Sepal.Width, Petal.Length, color=Species))
> 
> # link another plot with the previous plot
> p['linkingGroup'] <- "iris_data"
> p2 <- with(iris, l_plot(Sepal.Length, Petal.Width, linkingGroup="iris_data"))
> 
> # Use with other tk widgets
> library(tcltk)
> tt <- tktoplevel()
> p1 <- l_plot(parent=tt, x=c(1,2,3), y=c(3,2,1))
> p2 <- l_plot(parent=tt, x=c(4,3,1), y=c(6,8,4))
> 
> tkgrid(p1, row=0, column=0, sticky="nesw")
<Tcl>  
> tkgrid(p2, row=0, column=1, sticky="nesw")
<Tcl>  
> tkgrid.columnconfigure(tt, 0, weight=1)
<Tcl>  
> tkgrid.columnconfigure(tt, 1, weight=1)
<Tcl>  
> tkgrid.rowconfigure(tt, 0, weight=1)
<Tcl>  
> 
> tktitle(tt) <- "Loon plots with custom layout"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_plot.default")
> ### * l_plot.default
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_plot.default
> ### Title: Create an interactive 2d scatterplot display
> ### Aliases: l_plot.default
> 
> ### ** Examples
> 
> p1 <- with(iris, l_plot(Sepal.Length, Sepal.Width, color=Species))
> 
> p2 <- with(iris, l_plot(Petal.Length ~ Petal.Width, color=Species))
> 
> # link the two plots p1 and p2
> l_configure(p1, linkingGroup="iris", sync="push")
> l_configure(p2, linkingGroup="iris", sync="push")
> p1['selected'] <- iris$Species == "setosa" 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_plot.default", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_plot.map")
> ### * l_plot.map
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_plot.map
> ### Title: Create an plot with a map layered
> ### Aliases: l_plot.map
> 
> ### ** Examples
> 
> library(maps)
> p <- l_plot(map('world', fill=TRUE, plot=FALSE))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_plot.map", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:maps’

> nameEx("l_plot_inspector")
> ### * l_plot_inspector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_plot_inspector
> ### Title: Create a Scatterplot Inspector
> ### Aliases: l_plot_inspector
> 
> ### ** Examples
> 
> i <- l_plot_inspector()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_plot_inspector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_plot_inspector_analysis")
> ### * l_plot_inspector_analysis
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_plot_inspector_analysis
> ### Title: Create a Scatterplot Analysis Inspector
> ### Aliases: l_plot_inspector_analysis
> 
> ### ** Examples
> 
> i <- l_plot_inspector_analysis()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_plot_inspector_analysis", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_redraw")
> ### * l_redraw
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_redraw
> ### Title: Force a Content Redraw of a Plot
> ### Aliases: l_redraw
> 
> ### ** Examples
> 
> p <- l_plot(iris)
> l_redraw(p)
<Tcl>  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_redraw", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_resize")
> ### * l_resize
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_resize
> ### Title: Resize Plot Widget
> ### Aliases: l_resize
> 
> ### ** Examples
> 
> p <- l_plot(iris)
> 
> l_resize(p, 300, 300)
> l_size(p) <- c(500, 500)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_resize", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_serialaxes")
> ### * l_serialaxes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_serialaxes
> ### Title: Create a Serialaxes Widget
> ### Aliases: l_serialaxes
> 
> ### ** Examples
> 
> s <- l_serialaxes(data=oliveAcids, color=olive$Area, title="olive data")
> s['axesLayout'] <- 'parallel'
> states <- l_info_states(s)
> names(states)
 [1] "linkingGroup"     "linkingKey"       "itemLabel"        "showItemLabels"  
 [5] "showAxes"         "showAxesLabels"   "linewidth"        "scaling"         
 [9] "axesLayout"       "showArea"         "axesLabels"       "data"            
[13] "sequence"         "active"           "color"            "selected"        
[17] "showGuides"       "showLabels"       "useLoonInspector" "title"           
[21] "tag"             
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_serialaxes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_serialaxes_inspector")
> ### * l_serialaxes_inspector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_serialaxes_inspector
> ### Title: Create a Serialaxes Analysis Inspector
> ### Aliases: l_serialaxes_inspector
> 
> ### ** Examples
> 
> i <- l_serialaxes_inspector()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_serialaxes_inspector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_setAspect")
> ### * l_setAspect
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_setAspect
> ### Title: Set the aspect ratio of a plot
> ### Aliases: l_setAspect
> 
> ### ** Examples
> 
> p <- with(iris, l_plot(Sepal.Length ~ Sepal.Width, color=Species))
> 
> l_aspect(p)
[1] 0.4562569
> l_setAspect(p, x = 1, y = 2) 
<Tcl>  
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_setAspect", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_setColorList")
> ### * l_setColorList
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_setColorList
> ### Title: Use custom colors for mapping nominal values to distinct colors
> ### Aliases: l_setColorList
> 
> ### ** Examples
> 
> 
> l_plot(1:3, color=1:3) # loon's default mapping
[1] ".l114.plot"
attr(,"class")
[1] "loon"
> 
> cols <- l_getColorList()
> l_setColorList(c("red", "blue", "green", "orange"))
> 
> ## close and reopen inspector
> 
> l_plot(1:3, color=1:3)   # use the new color mapping
[1] ".l115.plot"
attr(,"class")
[1] "loon"
> l_plot(1:10, color=1:10) # use loons default color mapping as color list is too small
warning: need more colors than are available in current color palette. Using hcl colors for the current color encoding.
[1] ".l116.plot"
attr(,"class")
[1] "loon"
>  
> # reset to default
> l_setColorList(cols)
> 
> ## Not run: 
> ##D # you can also perform the color mapping yourself, for example with
> ##D # the col_numeric function provided in the scales package
> ##D library(scales)
> ##D p_custom <- with(olive, l_plot(stearic ~ oleic,
> ##D      color = col_numeric("Greens", domain = NULL)(palmitic)))
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_setColorList", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_setColorList_ColorBrewer")
> ### * l_setColorList_ColorBrewer
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_setColorList_ColorBrewer
> ### Title: Set loon's color mapping list to the colors from ColorBrewer
> ### Aliases: l_setColorList_ColorBrewer
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D library(RColorBrewer)
> ##D display.brewer.all()
> ## End(Not run)
> 
> l_setColorList_ColorBrewer("Set1")
> p <- l_plot(iris)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_setColorList_ColorBrewer", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_size-set")
> ### * l_size-set
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_size<-
> ### Title: Resize Plot Widget
> ### Aliases: l_size<-
> 
> ### ** Examples
> 
> p <- l_plot(iris)
> 
> l_resize(p, 300, 300)
> l_size(p) <- c(500, 500)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_size-set", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("l_worldview")
> ### * l_worldview
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: l_worldview
> ### Title: Create a Worldview Inspector
> ### Aliases: l_worldview
> 
> ### ** Examples
> 
> i <- l_worldview()
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("l_worldview", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("linegraph.loongraph")
> ### * linegraph.loongraph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: linegraph.loongraph
> ### Title: Create a linegraph of a graph
> ### Aliases: linegraph.loongraph
> 
> ### ** Examples
> 
> g <- loongraph(letters[1:4], letters[1:3], letters[2:4], FALSE)
> 
> linegraph(g)
$nodes
[1] "a:b" "b:c" "c:d"

$from
[1] "a:b" "b:c"

$to
[1] "b:c" "c:d"

$isDirected
[1] FALSE

attr(,"class")
[1] "loongraph"
attr(,"separator")
[1] ":"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("linegraph.loongraph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("loon_palette")
> ### * loon_palette
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: loon_palette
> ### Title: Loon's color generator for creating color palettes
> ### Aliases: loon_palette
> 
> ### ** Examples
> 
> loon_palette(12)
 [1] "#68B2ED" "#CDA64D" "#EF8AC9" "#1EC28B" "#C698EE" "#92B74D" "#EE938C"
 [8] "#00C1C6" "#9FA5F3" "#B3AF40" "#F38CAC" "#00C3AA"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("loon_palette", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("loongraph")
> ### * loongraph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: loongraph
> ### Title: Create a graph object of class loongraph
> ### Aliases: loongraph
> 
> ### ** Examples
> 
> g <- loongraph(
+   nodes = c("A", "B", "C", "D"),
+   from = c("A", "A", "B", "B", "C"),
+   to   = c("B", "C", "C", "D", "D")
+ )
> 
> ## Not run: 
> ##D # create a loon graph plot
> ##D p <- l_graph(g)
> ## End(Not run)
> 
> lg <- linegraph(g)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("loongraph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("make_glyphs")
> ### * make_glyphs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: make_glyphs
> ### Title: Make arbitrary glyphs with R graphic devices
> ### Aliases: make_glyphs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(minority)
> ##D p <- l_plot(minority$long, minority$lat)
> ##D 
> ##D library(maps)
> ##D canada <- map("world",  "Canada", fill=TRUE, plot=FALSE)
> ##D l_map <- l_layer(p, canada, asSingleLayer=TRUE)
> ##D l_scaleto_world(p)
> ##D 
> ##D img <- make_glyphs(lapply(1:nrow(minority), function(i)minority[i,]), function(m) {
> ##D     par(mar=c(1,1,1,1)*.5)
> ##D     mat <- as.matrix(m[1,1:10]/max(m[1:10]))
> ##D     barplot(height = mat,
> ##D             beside = FALSE,
> ##D             ylim = c(0,1),
> ##D             axes= FALSE,
> ##D             axisnames=FALSE)
> ##D }, width=120, height=120)
> ##D 
> ##D l_imageviewer(img)
> ##D 
> ##D g <- l_glyph_add_image(p, img, "barplot")
> ##D p['glyph'] <- g
> ##D 
> ##D 
> ##D ## with grid
> ##D li <- make_glyphs(runif(6), function(x) {
> ##D     if(any(x>1 | x<0))
> ##D         stop("out of range")
> ##D     pushViewport(plotViewport(unit(c(1,1,1,1)*0, "points")))
> ##D     grid.rect(gp=gpar(fill=NA))
> ##D     grid.rect(0, 0, height = unit(x, "npc"), just = c("left", "bottom"),
> ##D               gp=gpar(col=NA, fill="steelblue"))
> ##D })
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("make_glyphs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("measures1d")
> ### * measures1d
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: measures1d
> ### Title: Closure of One Dimensional Measures
> ### Aliases: measures1d
> 
> ### ** Examples
> 
> m1 <- measures1d(oliveAcids, mean=mean, median=median,
+      sd=sd, q1=function(x)as.vector(quantile(x, probs=0.25)),
+      q3=function(x)as.vector(quantile(x, probs=0.75)))
>      
> m1
[1] "1d measure closure with measures: mean, median, sd, q1, q3 \n"
> m1()
                  mean median        sd      q1      q3
palmitic    1231.74126 1201.0 168.59226 1095.00 1360.00
palmitoleic  126.09441  110.0  52.49436   87.75  169.25
stearic      228.86538  223.0  36.74494  205.00  249.00
oleic       7311.74825 7302.5 405.81022 7000.00 7680.00
linoleic     980.52797 1030.0 242.79922  770.75 1180.75
linolenic     31.88811   33.0  12.96870   26.00   40.25
arachidic     58.09790   61.0  22.03025   50.00   70.00
eicosenoic    16.28147   17.0  14.08330    2.00   28.00
> m1(olive$palmitoleic>100)
                  mean median        sd      q1      q3
palmitic    1331.49693 1345.5 144.92782 1254.25 1419.00
palmitoleic  162.35890  163.0  39.13201  130.00  185.00
stearic      224.03374  220.0  33.35324  203.00  242.00
oleic       7058.02454 7025.0 282.79153 6883.00 7253.75
linoleic    1090.95399 1134.0 177.25662  950.00 1215.50
linolenic     33.86196   34.0  10.89852   29.00   40.75
arachidic     59.93252   61.0  17.65329   53.00   68.00
eicosenoic    21.59816   23.5  11.18355   16.00   29.00
> m1('data')
    palmitic palmitoleic stearic oleic linoleic linolenic arachidic eicosenoic
1       1075          75     226  7823      672        36        60         29
2       1088          73     224  7709      781        31        61         29
3        911          54     246  8113      549        31        63         29
4        966          57     240  7952      619        50        78         35
5       1051          67     259  7771      672        50        80         46
6        911          49     268  7924      678        51        70         44
7        922          66     264  7990      618        49        56         29
8       1100          61     235  7728      734        39        64         35
9       1082          60     239  7745      709        46        83         33
10      1037          55     213  7944      633        26        52         30
11      1051          35     219  7978      605        21        65         24
12      1036          59     235  7868      661        30        62         44
13      1074          70     214  7728      747        50        79         33
14       875          52     243  8018      655        41        79         32
15       952          49     254  7795      780        50        75         41
16      1155          98     201  7606      816        32        60         29
17       943          94     183  7840      788        42        75         31
18      1278          69     205  7344      957        45        70         28
19       961          70     195  7958      742        46        75         30
20       952          77     258  7820      736        43        78         33
21      1074          67     236  7692      716        56        83         45
22       995          46     288  7806      679        56        86         40
23      1056          53     247  7703      700        54        89         51
24      1065          39     234  7876      703        42        74         26
25      1065          45     245  7779      696        47        82         38
26      1315         139     230  7299      832        42        60         32
27      1321         136     217  7174      950        43        63         30
28      1359         115     246  7234      874        45        63         18
29      1378         111     272  7127      940        46        64         23
30      1295         109     245  7253      903        43        62         38
31      1275         121     215  7285      892        40        68         41
32      1336         120     318  7083      915        50        70         38
33      1309         122     241  7257      870        46        72         35
34      1340         114     189  7337      820        48        72         21
35      1299         116     253  7309      823        40        69         27
36      1221         107     221  7441      798        54        70         28
37      1245          72     283  7395      829        44        67         28
38      1285         129     244  7323      819        57        65         36
39      1248         107     313  7299      840        46        66         33
40      1356         106     236  7209      866        48        75         36
41      1260         102     228  7354      870        49        64         28
42      1261         121     312  7238      877        47        65         25
43      1304         124     279  7160      928        48        61         37
44      1344         117     287  7129      897        51        65         41
45      1323          96     300  7351      757        47        54         26
46      1292         117     215  7351      839        48        61         32
47      1254         118     244  7394      786        46        71         24
48      1312         131     259  7167      939        41        69         20
49      1213         109     301  7261      925        47        65         31
50      1359          98     351  7262      780        41        56         16
51      1266          97     263  7435      743        45        69         29
52      1298          99     311  7311      787        45        67         23
53      1272         116     279  7258      872        43        72         27
54      1278          87     332  7379      771        44        53         24
55      1184         112     311  7391      819        48        57         28
56      1382         110     268  7241      828        39        60         30
57      1183         146     292  7580      618        38        51         23
58      1261         153     219  7355      818        52        70         26
59      1198         136     239  7639      633        27        55         19
60      1225         134     232  7658      616        36        49         26
61      1339         166     208  7190      923        40        69         25
62      1132         157     240  7641      638        45        60         31
63      1381         183     245  7385      609        47        70         25
64      1409         128     257  7257      759        43        57         16
65      1306         127     250  7254      869        47        68         24
66      1372         120     250  7355      702        44        68         28
67      1336         113     242  7293      855        38        60         18
68      1401         151     238  7164      857        45        72         36
69      1390         119     234  7236      823        40        62         41
70      1432         152     281  7029      949        39        55         25
71      1412         124     298  7182      790        45        68         28
72      1366         147     291  7197      783        51        70         34
73      1383         118     273  7282      738        45        68         29
74      1283         102     263  7400      763        54        65         28
75      1296         136     260  7380      780        48        51         18
76      1287         108     287  7343      826        44        44         23
77      1351         159     296  7229      810        36        60         22
78      1241          97     268  7499      709        52        69         36
79      1267         101     300  7230      898        74        65         34
80      1235         138     252  7322      861        54        66         36
81      1255         103     223  7395      848        47        56         30
82      1454         183     196  7057     1014        27        46         19
83      1347         194     197  7277      895        25        46         15
84      1364         204     225  6929     1084        21        50         14
85      1410         199     216  7130      955        21        48         19
86      1384         178     208  7105      999        29        67         26
87      1412         185     217  6842     1203        34        72         32
88      1410         232     280  6715     1233        32        60         24
89      1509         209     257  6647     1240        42        62         30
90      1317         197     256  7036     1067        40        60         22
91      1286         192     203  7132     1053        38        65         28
92      1273         191     202  6862     1303        43        70         28
93      1463         183     183  6747     1307        36        60         24
94      1399         187     191  6861     1233        38        60         17
95      1413         193     208  6875     1202        30        60         18
96      1369         206     203  6953     1168        35        50         16
97      1488         172     170  6920     1144        37        54         14
98      1323         160     205  6911     1298        24        50         17
99      1311         166     170  6902     1312        41        69         28
100     1286         163     183  7040     1230        29        57         12
101     1380         173     188  7038     1139        31        44         14
102     1394         164     223  7086     1042        24        43         23
103     1324         174     198  6863     1289        36        70         21
104     1290         157     192  7000     1263        26        51         19
105     1361         163     196  6888     1273        37        58         24
106     1387         182     242  6913     1101        44        68         30
107     1369         180     181  7000     1130        39        45         24
108     1303         165     175  7025     1243        31        41         16
109     1346         160     169  7072     1151        39        48         15
110     1369         171     184  6937     1246        30        48         15
111     1305         172     169  7004     1260        28        50         11
112     1351         179     186  6935     1243        36        50         19
113     1283         151     182  7000     1271        40        52         21
114     1449         175     198  6883     1162        40        70         22
115     1310         180     183  7054     1202        26        32         12
116     1360         163     176  6901     1280        28        65         27
117     1300         187     196  6920     1253        41        76         25
118     1368         171     218  7010     1057        41        54         26
119     1207         151     156  7159     1234        27        51         14
120     1348         154     183  6917     1277        48        56         16
121     1334         186     229  7261      827        34        56         20
122     1301         156     207  7003     1229        41        48         14
123     1226         181     213  6961     1230        47        74         26
124     1201         168     190  7100     1216        43        64         16
125     1297         153     177  7004     1260        35        60         16
126     1248         163     158  7103     1222        31        60         14
127     1335         159     197  6974     1220        36        60         17
128     1219         167     171  7087     1254        35        50         16
129     1318         179     177  7030     1194        35        42         25
130     1264         167     166  7130     1187        22        52         12
131     1201         175     201  7129     1193        36        49         15
132     1252         180     181  7055     1214        31        59         38
133     1273         182     209  6965     1191        43        74         23
134     1351         179     170  7034     1154        35        66         10
135     1336         155     212  7103     1086        33        55         20
136     1499         201     182  6803     1204        30        56         24
137     1425         198     193  7032     1041        31        52         17
138     1358         204     227  6962     1109        41        65         34
139     1346         181     257  7147      933        40        60         36
140     1392         186     256  6732     1278        53        64         29
141     1311         166     222  7006     1147        41        80         27
142     1314         171     229  6923     1198        47        76         42
143     1409         200     207  6842     1224        31        60         27
144     1342         174     221  6993     1147        36        64         23
145     1387         182     206  7100     1020        34        54         17
146     1413         202     205  6920     1165        36        46         13
147     1430         209     225  6800     1200        32        59         27
148     1336         185     223  6956     1155        56        73         16
149     1372         200     200  6916     1189        33        50         22
150     1330         157     228  7055     1108        42        55         25
151     1412         207     208  6822     1239        36        51         28
152     1321         209     217  6948     1178        42        62         23
153     1401         200     217  6980     1073        40        68         21
154     1401         214     217  6734     1293        44        69         27
155     1457         168     242  6724     1266        54        59         30
156     1451         199     221  6835     1177        37        51         29
157     1438         206     248  6806     1183        34        57         28
158     1462         204     237  6644     1309        42        54         28
159     1529         215     203  6602     1310        45        69         27
160     1510         189     245  6752     1188        36        52         28
161     1437         222     184  6803     1240        43        56         16
162     1327         129     247  7024     1157        38        56         22
163     1438         172     252  6630     1380        40        64         24
164     1447         176     189  6849     1180        42        64         26
165     1355         144     214  6972     1198        33        60         24
166     1369         156     241  6890     1209        42        63         30
167     1471         188     276  6697     1269        34        51         16
168     1456         179     240  6738     1267        41        65         14
169     1314         140     207  7020     1220        28        59         12
170     1408         176     192  6909     1195        45        50         25
171     1397         172     191  7107     1018        36        50         29
172     1413         191     186  6937     1180        31        46         13
173     1539         194     213  6764     1178        38        58         16
174     1304         159     234  7019     1174        38        53         19
175     1341         160     231  7033     1069        40        67         33
176     1508         208     249  6641     1311        25        43         20
177     1515         226     257  6595     1287        41        63         16
178     1262         165     235  7120     1113        32        51         21
179     1307         197     238  7003     1144        37        50         24
180     1294         159     253  7009     1190        30        52         13
181     1460         187     215  6843     1172        35        56         32
182     1476         187     203  6837     1197        36        48         22
183     1482         178     197  6814     1201        40        64         24
184     1388         176     185  7008     1111        48        53         31
185     1367         172     235  7066     1054        35        45         26
186     1272         207     205  7152     1098        37        52         22
187     1323         157     234  7132     1022        38        58         31
188     1206         218     242  7193     1002        37        54         25
189     1383         157     217  7018     1090        40        60         37
190     1521         190     238  6956      986        36        50         23
191     1350         168     227  6986     1165        29        58         17
192     1422         181     218  6813     1230        30        59         21
193     1298         166     224  6986     1162        34        65         31
194     1447         236     245  6607     1336        33        51         21
195     1347         197     211  6795     1300        32        59         34
196     1339         170     253  6989     1110        29        63         23
197     1388         183     216  6867     1208        28        61         21
198     1527         260     232  6488     1370        31        45         20
199     1495         237     236  6571     1318        32        58         26
200     1487         246     251  6504     1390        29        53         19
201     1399         180     232  6855     1190        32        66         22
202     1489         215     242  6777     1145        30        60         22
203     1339         166     226  6928     1198        30        60         23
204     1482         246     238  6444     1462        27        50         20
205     1434         172     255  6646     1354        27        59         25
206     1347         156     214  6850     1313        25        48         19
207     1340         158     233  6848     1272        32        63         25
208     1453         180     244  6752     1238        34        54         23
209     1306         149     226  7082     1097        33        61         24
210     1349         161     217  6997     1138        31        62         23
211     1254         151     205  7319      947        28        54         23
212     1168         144     220  7230     1109        31        52         28
213     1346         167     224  6959     1111        30        49         23
214     1390         184     212  6898     1189        29        44         19
215     1283         149     224  7077     1104        30        57         32
216     1214         137     232  7269     1005        32        55         23
217     1491         227     205  6941      988        33        68         34
218     1479         218     207  7039      887        36        65         36
219     1445         174     228  6875     1123        29        69         31
220     1439         183     218  6775     1226        32        66         29
221     1387         154     204  6991     1090        34        74         32
222     1426         169     192  7025     1043        31        64         27
223     1451         200     208  6980     1006        30        62         31
224     1493         204     188  6913     1044        32        61         35
225     1419         192     207  6996     1014        36        70         36
226     1342         177     199  7172      952        34        65         33
227     1349         152     236  7145      949        35        75         29
228     1440         196     208  6938     1070        32        61         26
229     1460         215     197  6918     1081        28        55         23
230     1249         133     205  7417      827        33        72         33
231     1348         159     238  7017     1081        31        67         25
232     1341         155     244  6958     1144        32        68         26
233     1398         149     204  7182      907        29        76         30
234     1454         200     199  6910     1090        30        62         25
235     1334         153     219  6928     1214        33        66         24
236     1438         204     189  7107      910        33        63         27
237     1303         138     212  7170     1016        34        69         25
238     1323         147     210  7108     1070        33        61         20
239     1417         169     207  6875     1184        34        57         27
240     1360         167     225  6883     1220        31        55         27
241     1420         179     214  6923     1121        33        56         27
242     1472         218     214  6724     1238        29        53         23
243     1368         174     205  7042     1066        31        57         26
244     1367         173     228  6948     1141        32        53         24
245     1403         173     209  6843     1210        33        63         33
246     1413         197     206  6737     1387        34        60         31
247     1201         138     207  7011     1269        37        64         35
248     1359         180     207  6895     1203        33        61         30
249     1518         198     225  6681     1243        29        57         24
250     1434         185     189  6771     1269        30        62         25
251     1367         162     179  6772     1368        33        64         27
252     1461         181     197  6783     1246        26        57         23
253     1368         161     198  7030     1095        33        59         31
254     1419         159     215  6862     1193        35        60         31
255     1514         162     298  6725     1119        45        93         30
256     1328         171     253  6987     1030        38        83         39
257     1469         160     337  6675     1127        44        94         36
258     1222         133     227  7425      824        36        69         35
259     1639         172     331  6510     1124        46        91         32
260     1345         133     272  6801     1194        48        83         37
261     1339         170     275  6838     1060        46        88         43
262     1194         135     263  7277      889        44        95         41
263     1112          68     375  7770      448        52        69         45
264     1222          70     329  7605      566        48        67         43
265     1136          72     341  7616      661        49        65         32
266      926          41     277  7815      784        45        65         25
267     1105          69     373  7714      532        51        68         37
268     1109          79     305  7576      763        45        64         36
269     1284          93     265  7235      893        43        77         46
270     1120          69     277  7416      946        42        59         36
271      916          52     281  7870      694        42        64         58
272      905          49     288  7747      812        49        71         56
273     1206          55     287  7329      935        44        74         42
274     1457         182     267  7020      863        41        84         37
275     1327         140     193  7328      823        36        87         35
276     1303         100     251  7045     1049        40        86         40
277     1444         175     259  6876     1027        34        78         32
278     1505         243     226  6962      858        30        72         27
279     1429         162     223  6917     1041        37        77         40
280     1491         162     211  6994      928        37        97         38
281     1393         128     211  7189      870        38        93         40
282     1404         134     210  7110      923        40       101         43
283     1222         130     214  7374      856        38        89         45
284     1153          74     316  7593      705        42        64         32
285     1169          76     307  7553      728        43        69         32
286     1369         104     237  7375      775        39        70         15
287      993          58     267  7743      773        41        62         44
288      980          53     254  7719      815        44        69         47
289      967          55     273  7692      833        45        63         47
290     1128          73     354  7527      728        44        76         38
291     1188          85     273  7445      814        44        73         42
292     1257          95     247  7405      812        43        70         35
293     1262          88     301  7471      704        43        71         31
294     1283         153     196  7107     1115        37        60         28
295     1263         155     199  7140     1148        31        42         18
296     1369         158     215  7160      958        38        69         32
297     1353         172     175  6965     1212        28        75         19
298     1187         139     185  7427      952        29        56         22
299     1732         231     156  6437     1313        45        62         23
300     1620         255     166  6628     1212        29        62         27
301     1543         172     193  6740     1157        52        87         34
302     1498         170     195  6804     1206        35        66         23
303     1399         169     171  7011     1100        36        72         16
304     1293         156     191  7101     1111        32        60         31
305     1420         175     152  7004     1149        27        50         20
306     1721         238     255  6300     1350        35        70         28
307     1742         221     156  6415     1315        43        82         23
308     1391         187     189  6975     1062        52        70         45
309     1517         206     249  6680     1205        33        80         27
310     1269         157     193  7140     1148        31        40         18
311     1577         204     208  6732     1183        20        52         20
312     1590         241     195  6705     1149        27        68         21
313     1621         280     197  6608     1179        28        58         27
314     1753         275     236  6367     1214        23        61         27
315     1679         260     177  6568     1191        30        59         33
316     1419         203     176  6973     1083        38        78         27
317     1693         236     174  6499     1204        51       102         37
318     1692         270     234  6499     1196        31        59         15
319     1638         252     215  6570     1199        39        53         29
320     1497         247     219  6621     1270        36        73         32
321     1442         222     194  6677     1314        36        72         38
322     1680         270     170  6440     1310        31        62         28
323     1463         164     185  6909     1154        49        58         17
324     1129         120     222  7272     1112        43        98          2
325     1042         135     210  7376     1116        35        90          3
326     1103          96     210  7380     1085        32        94          3
327     1118          97     221  7279     1154        35        94          2
328     1052          95     215  7388     1126        31        92          1
329     1116         102     231  7290     1168        26        66          1
330     1108         132     231  7319     1101        20        66          2
331     1129         108     212  7386     1074        28        62          3
332     1085          91     223  7384     1126        28        62          3
333     1104         103     233  7322     1147        27        61          2
334     1098          88     212  7338     1140        28        67          1
335     1135          98     251  7120     1314        20        61          2
336     1158         108     245  7065     1326        22        75          1
337     1133         110     241  7080     1342        21        68          3
338     1095         125     250  7120     1305        21        83          1
339     1201          87     238  6990     1383        25        75          3
340     1213         112     245  7007     1335        22        65          3
341     1108          92     231  7367     1110        29        62          3
342     1075         103     207  7413     1096        32        68          2
343     1059          96     228  7386     1128        25        72          2
344     1176          92     207  7347     1057        35        82          1
345     1159          98     213  7320     1108        38        64          1
346     1132          80     201  7398     1095        27        67          2
347     1107          75     220  7399     1096        29        90          1
348     1092         104     234  7355     1126        28        58          2
349     1119          81     219  7409     1057        33        81          2
350     1106          93     212  7381     1104        35        68          1
351     1047         101     238  7385     1120        28        89          1
352     1165          99     214  7331     1101        22        67          3
353     1158          84     201  7327     1123        29        77          2
354     1095          88     203  7415     1093        37        78          1
355     1176          75     205  7396     1107        33        74          2
356     1103         109     220  7335     1140        28        59          2
357     1112          92     209  7356     1125        32        73          2
358     1091          93     222  7377     1113        20        53          2
359     1080          98     219  7371     1125        33        78          1
360     1051         108     227  7403     1114        30        66          3
361     1096          84     211  7415     1091        30        71          2
362     1142          97     225  7341     1101        28        65          1
363     1047          96     236  7399     1107        32        80          3
364     1114          86     210  7359     1116        31        83          2
365     1140          93     241  7324     1098        23        74          1
366     1075          91     200  7410     1107        36        80          1
367     1092         106     219  7427     1125        33        77          1
368     1076          95     204  7408     1130        27        79          2
369     1178          89     201  7381     1099        34        87          2
370     1095         104     223  7367     1111        43        56          2
371     1166          97     272  6971     1390        20        83          3
372     1154         119     257  7130     1253        22        61          1
373     1177         111     241  6882     1470        22        95          2
374     1160          96     240  7043     1357        24        79          2
375     1122         104     241  7145     1313        15        58          1
376     1132          99     257  7065     1362        24        90          3
377     1096         100     260  7162     1282        25        74          2
378     1131          87     233  7144     1307        25        72          3
379     1184         105     258  7020     1340        26        66          2
380     1135          94     235  7123     1320        24        67          2
381     1084          96     240  7164     1330        28        57          1
382     1086         127     252  7159     1285        28        62          2
383     1140          95     258  7085     1347        23        71          3
384     1138         101     254  7103     1310        25        68          1
385     1159         110     261  7068     1297        27        77          2
386     1051          78     211  7421     1146        30        82          2
387     1048          79     213  7439     1130        28        61          2
388     1061          86     220  7421     1102        29        79          3
389     1105          88     210  7353     1142        28        72          1
390     1145          35     237  7208     1118        20        46          2
391     1049          96     219  7303     1168        22        47          2
392     1105         120     218  7302     1158        23        45          3
393     1030          84     214  7403     1177        21        70          1
394     1070          98     215  7280     1240        28        68          3
395     1103          81     208  7310     1177        30        90          3
396     1040         101     205  7368     1176        25        85          3
397     1100          95     210  7320     1113        22        72          3
398     1118          85     199  7415     1060        36        86          3
399     1065          98     230  7345     1163        24        74          1
400     1131          78     221  7358     1120        22        69          2
401     1080         120     218  7296     1145        35       105          2
402     1075          86     231  7403     1109        22        73          3
403     1040         103     228  7364     1173        25        66          2
404     1128          82     203  7320     1148        30        88          1
405     1060         111     231  7363     1149        20        65          1
406     1103          78     220  7365     1149        20        65          2
407     1110          91     201  7318     1185        24        74          2
408     1091         108     218  7383     1183        28        88          3
409     1094          96     220  7341     1127        26        96          2
410     1131          87     208  7170     1308        28        57          2
411     1175         108     214  7076     1307        33        85          2
412     1076          77     202  7243     1305        29        67          1
413     1120          90     240  7068     1383        23        75          1
414     1152         111     238  7080     1372        25        81          2
415     1141          95     250  7035     1388        22        68          2
416     1098         103     267  7135     1301        24        76          2
417     1126         100     236  7062     1380        26        69          1
418     1087          89     243  7200     1302        18        60          1
419     1115          96     236  7085     1372        20        75          2
420     1178          92     241  7006     1376        22        84          1
421     1162         106     242  7025     1368        25        71          2
422     1085          70     180  7955      605        20        50          1
423     1085          70     185  7955      600        25        55          1
424     1090          60     190  7950      600        28        47          2
425     1080          65     189  7960      602        35        20          1
426     1090          60     195  7955      600        28        42          2
427     1105          55     200  7900      600        37        55          2
428     1060          75     175  7975      610        20        55          2
429     1050          70     170  7977      605        28        65          1
430     1100          55     198  7905      600        35        50          3
431     1065          65     178  7965      605        22        65          2
432     1085          60     188  7955      602        30        50          2
433     1080          65     180  7960      605        25        55          1
434     1085          60     190  7955      602        30        53          1
435     1075          68     195  7960      602        20        40          3
436     1090          58     192  7950      600        35        40          3
437     1095          60     198  7945      600        38        34          2
438     1090          58     195  7950      600        30        42          2
439     1095          58     198  7950      602        35        32          1
440     1090          58     195  7940      600        35        42          2
441     1095          58     198  7945      600        35        34          1
442     1095          55     200  7940      600        35        45          3
443     1080          70     188  7965      608        28        36          3
444     1090          60     195  7950      600        32        38          2
445     1105          55     200  7900      595        39        56          1
446     1110          50     205  7900      595        40        52          1
447     1075          70     198  7978      608        28        33          2
448     1075          65     185  7980      608        35        42          3
449     1065          75     180  7975      610        25        50          3
450     1070          75     188  7980      602        22        45          2
451     1070          75     188  7980      602        22        45          1
452     1100          70     200  7910      610        39        44          1
453     1075          70     185  7960      610        22        58          2
454     1050          78     175  7990      610        18        59          3
455     1090          60     198  7945      600        32        35          2
456     1050          78     188  7990      608        28        23          3
457     1075          70     190  7975      605        28        27          3
458     1098          54     202  7945      595        42        32          2
459     1105          15     198  8005      575        52        20          2
460     1110          75     220  7915      510        55        65          2
461     1058          50     178  7988      626        40        55          3
462     1115          30     225  7955      600        55        15          2
463     1105          30     198  7995      570        52        20          3
464     1072          49     178  7980      615        48        48          2
465     1110          15     210  7990      570        50        20          2
466     1110          80     215  7910      525        50        60          1
467     1055          60     175  7985      620        45        50          1
468     1100          80     215  7930      535        45        60          2
469     1105          55     205  7965      600        25        20          2
470     1095          50     210  7948      600        25        35          2
471     1110          50     220  7950      600        52        10          2
472     1092          37     210  7955      600        40        40          3
473     1290          60     260  7550      670        70       100          2
474     1170          80     230  7690      720        40        70          1
475     1100          90     250  7680      760        30        80          2
476     1120          70     240  7720      730        40        80          2
477     1160          70     250  7650      750        30        90          1
478     1200          50     210  7770      690        20        50          3
479     1140          50     200  7990      580        10        20          1
480     1220          80     240  7610      760        30        60          2
481     1180          90     250  7520      800        50       100          2
482     1210          70     250  7560      780        40        90          2
483     1220          80     220  7540      770        60       100          2
484     1180         100     190  7520      820        50       100          1
485     1160          90     220  7580      790        40        90          1
486     1130         100     240  7620      780        30        90          1
487     1080         100     260  7710      750        20        70          2
488     1090          90     280  7730      720        50       100          1
489     1020         100     270  7770      710        40        90          1
490     1090          90     250  7680      760        60        80          1
491     1120         100     260  7720      680        30        80          2
492     1080          80     240  7830      670        30        70          2
493     1160          70     230  7860      640        10        20          1
494     1100          80     240  7820      670        20        70          2
495     1050         100     250  7930      630        10        30          3
496     1090          90     270  7780      690        30        50          3
497     1120          80     260  7750      680        30        80          3
498     1120         100     250  7680      730        40        70          2
499     1190          90     230  7670      710        30        80          2
500     1170         110     250  7620      740        20        90          1
501     1120         100     230  7720      730        20        70          1
502     1190          80     270  7690      720        10        40          2
503     1400          90     270  7420      800         0        20          2
504     1350          80     250  7520      760        10        30          1
505     1090          60     220  7890      670        10        60          2
506     1150          90     230  7790      650        30        60          1
507     1240          90     220  7820      590        10        30          1
508     1220         100     240  7890      530         0        10          2
509     1180          80     250  7870      580        10        30          2
510     1170         110     240  7730      630        30        90          1
511     1170         100     280  7710      640        20        70          3
512     1180          80     220  7790      680        10        40          1
513     1200          90     240  7820      590        10        50          2
514     1140          90     240  7880      570        20        60          3
515     1160          70     210  7870      580        30        80          3
516     1130          80     250  7780      650        40        60          3
517     1150          80     240  7800      630        30        70          2
518     1110          70     240  7820      670        20        70          3
519     1150          70     220  7850      620        20        40          2
520     1180          80     240  7760      670        20        50          2
521     1020          80     250  7920      680        10        30          3
522      610          80     230  8410      650         0        20          3
523     1190         150     290  7340     1020         0        10          2
524     1110         130     210  7550     1000         0         0          1
525     1020         100     220  7530     1030         0         0          3
526     1070         120     210  7600      990         0        10          3
527     1010          90     350  7480     1050        10        10          1
528     1060         140     240  7680      830        10        40          2
529     1060         140     270  7620      880        10        20          1
530     1030         100     230  7740      900         0         0          2
531     1120         130     250  7530      970         0         0          3
532     1030         110     220  7760      980         0         0          2
533     1070         100     230  7600      990        10         0          1
534     1140         180     220  7610      850        10        10          2
535     1090         180     230  7590      860        10        40          2
536      980         110     300  7720      910        10         0          3
537      980          90     330  7540     1040         0         0          2
538      960          90     200  7810      940         0         0          2
539      990          90     210  7780      930         0         0          2
540     1060         120     210  7600     1010         0         0          1
541     1240         150     250  7610      730        10        10          1
542     1060          90     310  7850      690         0         0          2
543     1020         100     290  7620      960         0        10          2
544      970          90     220  7700     1020         0         0          3
545     1180         130     220  7450     1010         0        10          2
546     1060         140     240  7690      850        10        10          1
547      990         100     250  7630     1030         0         0          3
548     1010          90     350  7630      940        10         0          3
549     1040          90     250  7780      820        10        10          1
550     1040          90     250  7810      810        10        10          2
551     1020          90     350  7620      920        10         0          3
552     1020          90     260  7620     1010         0         0          3
553     1010          90     350  7610      930        10         0          3
554      920         110     340  7720      910         0         0          3
555     1030         100     250  7710      900         0        10          2
556      960          90     300  7820      830         0         0          3
557     1030         110     210  7810      840         0         0          1
558     1010         100     240  7710      910        10        20          2
559     1020          90     240  7800      850         0         0          2
560     1120          90     300  7650      830         0        10          1
561     1090          90     290  7710      800        10         0          2
562     1100         120     280  7630      770        10        10          2
563     1090          80     240  7820      760        10         0          2
564     1150          90     250  7720      810         0        10          3
565     1110          90     230  7810      750         0        10          2
566     1010         110     210  7720      950         0         0          1
567     1070         100     220  7730      870        10        10          2
568     1280         110     290  7490      790        10        10          2
569     1060         100     270  7740      810        10        10          3
570     1010          90     210  7720      970         0         0          2
571      990         120     250  7750      870        10        10          2
572      960          80     240  7950      740        10        20          2
> m1('measures')
[1] "mean"   "median" "sd"     "q1"     "q3"    
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("measures1d", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("measures2d")
> ### * measures2d
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: measures2d
> ### Title: Closure of Two Dimensional Measures
> ### Aliases: measures2d
> 
> ### ** Examples
> 
> m <- measures2d(oliveAcids, separator='*', cov=cov, cor=cor)
> m
2d measure closure with measures: cov, cor 
> m()
                                 cov         cor
palmitic*palmitoleic     7395.224119  0.83560497
palmitic*stearic        -1055.562037 -0.17039178
palmitic*oleic         -57287.524096 -0.83733535
palmitic*linoleic       18857.690262  0.46068446
palmitic*linolenic        698.182908  0.31932669
palmitic*arachidic        847.932556  0.22829912
palmitic*eicosenoic      1191.801501  0.50195179
palmitoleic*stearic      -428.573959 -0.22218545
palmitoleic*oleic      -18159.280920 -0.85243835
palmitoleic*linoleic     7922.999106  0.62162666
palmitoleic*linolenic      63.388865  0.09311163
palmitoleic*arachidic      98.855890  0.08548117
palmitoleic*eicosenoic    307.805255  0.41635048
stearic*oleic            1693.924020  0.11359873
stearic*linoleic        -1764.851745 -0.19781693
stearic*linolenic           9.014684  0.01891719
stearic*arachidic         -33.172437 -0.04097892
stearic*eicosenoic         72.643911  0.14037748
oleic*linoleic         -83782.213611 -0.85031837
oleic*linolenic         -1148.198094 -0.21817123
oleic*arachidic         -2860.495450 -0.31996234
oleic*eicosenoic        -2424.055111 -0.42414586
linoleic*linolenic       -180.862014 -0.05743858
linoleic*arachidic       1128.477117  0.21097260
linoleic*eicosenoic       304.481605  0.08904499
linolenic*arachidic       177.203618  0.62023577
linolenic*eicosenoic      105.625243  0.57831851
arachidic*eicosenoic      101.970644  0.32866349
> m(keep=olive$palmitic>1360)
                                cov         cor
palmitic*palmitoleic     1975.76196  0.64958597
palmitic*stearic         -241.34237 -0.08521612
palmitic*oleic         -13774.18135 -0.73093470
palmitic*linoleic        4761.02058  0.34501728
palmitic*linolenic        -22.57707 -0.03493272
palmitic*arachidic        205.75926  0.19437962
palmitic*eicosenoic        16.62401  0.02747476
palmitoleic*stearic      -304.56498 -0.26254549
palmitoleic*oleic       -5783.43692 -0.74926458
palmitoleic*linoleic     3206.22945  0.56724648
palmitoleic*linolenic     -57.82659 -0.21843835
palmitoleic*arachidic     -45.45330 -0.10483183
palmitoleic*eicosenoic    -20.65618 -0.08334593
stearic*oleic             263.06768  0.03660183
stearic*linoleic        -1179.22795 -0.22405835
stearic*linolenic          36.76326  0.14914252
stearic*arachidic          57.43522  0.14226308
stearic*eicosenoic         18.93907  0.08206901
oleic*linoleic         -29898.57327 -0.85376517
oleic*linolenic            46.31955  0.02824076
oleic*arachidic          -164.69673 -0.06130890
oleic*eicosenoic           41.56957  0.02707203
linoleic*linolenic       -137.40795 -0.11440683
linoleic*arachidic       -381.98252 -0.19418246
linoleic*eicosenoic      -222.03097 -0.19746347
linolenic*arachidic        44.88053  0.48713418
linolenic*eicosenoic       21.37029  0.40579602
arachidic*eicosenoic       53.79682  0.62370668
> m('data')
    palmitic palmitoleic stearic oleic linoleic linolenic arachidic eicosenoic
1       1075          75     226  7823      672        36        60         29
2       1088          73     224  7709      781        31        61         29
3        911          54     246  8113      549        31        63         29
4        966          57     240  7952      619        50        78         35
5       1051          67     259  7771      672        50        80         46
6        911          49     268  7924      678        51        70         44
7        922          66     264  7990      618        49        56         29
8       1100          61     235  7728      734        39        64         35
9       1082          60     239  7745      709        46        83         33
10      1037          55     213  7944      633        26        52         30
11      1051          35     219  7978      605        21        65         24
12      1036          59     235  7868      661        30        62         44
13      1074          70     214  7728      747        50        79         33
14       875          52     243  8018      655        41        79         32
15       952          49     254  7795      780        50        75         41
16      1155          98     201  7606      816        32        60         29
17       943          94     183  7840      788        42        75         31
18      1278          69     205  7344      957        45        70         28
19       961          70     195  7958      742        46        75         30
20       952          77     258  7820      736        43        78         33
21      1074          67     236  7692      716        56        83         45
22       995          46     288  7806      679        56        86         40
23      1056          53     247  7703      700        54        89         51
24      1065          39     234  7876      703        42        74         26
25      1065          45     245  7779      696        47        82         38
26      1315         139     230  7299      832        42        60         32
27      1321         136     217  7174      950        43        63         30
28      1359         115     246  7234      874        45        63         18
29      1378         111     272  7127      940        46        64         23
30      1295         109     245  7253      903        43        62         38
31      1275         121     215  7285      892        40        68         41
32      1336         120     318  7083      915        50        70         38
33      1309         122     241  7257      870        46        72         35
34      1340         114     189  7337      820        48        72         21
35      1299         116     253  7309      823        40        69         27
36      1221         107     221  7441      798        54        70         28
37      1245          72     283  7395      829        44        67         28
38      1285         129     244  7323      819        57        65         36
39      1248         107     313  7299      840        46        66         33
40      1356         106     236  7209      866        48        75         36
41      1260         102     228  7354      870        49        64         28
42      1261         121     312  7238      877        47        65         25
43      1304         124     279  7160      928        48        61         37
44      1344         117     287  7129      897        51        65         41
45      1323          96     300  7351      757        47        54         26
46      1292         117     215  7351      839        48        61         32
47      1254         118     244  7394      786        46        71         24
48      1312         131     259  7167      939        41        69         20
49      1213         109     301  7261      925        47        65         31
50      1359          98     351  7262      780        41        56         16
51      1266          97     263  7435      743        45        69         29
52      1298          99     311  7311      787        45        67         23
53      1272         116     279  7258      872        43        72         27
54      1278          87     332  7379      771        44        53         24
55      1184         112     311  7391      819        48        57         28
56      1382         110     268  7241      828        39        60         30
57      1183         146     292  7580      618        38        51         23
58      1261         153     219  7355      818        52        70         26
59      1198         136     239  7639      633        27        55         19
60      1225         134     232  7658      616        36        49         26
61      1339         166     208  7190      923        40        69         25
62      1132         157     240  7641      638        45        60         31
63      1381         183     245  7385      609        47        70         25
64      1409         128     257  7257      759        43        57         16
65      1306         127     250  7254      869        47        68         24
66      1372         120     250  7355      702        44        68         28
67      1336         113     242  7293      855        38        60         18
68      1401         151     238  7164      857        45        72         36
69      1390         119     234  7236      823        40        62         41
70      1432         152     281  7029      949        39        55         25
71      1412         124     298  7182      790        45        68         28
72      1366         147     291  7197      783        51        70         34
73      1383         118     273  7282      738        45        68         29
74      1283         102     263  7400      763        54        65         28
75      1296         136     260  7380      780        48        51         18
76      1287         108     287  7343      826        44        44         23
77      1351         159     296  7229      810        36        60         22
78      1241          97     268  7499      709        52        69         36
79      1267         101     300  7230      898        74        65         34
80      1235         138     252  7322      861        54        66         36
81      1255         103     223  7395      848        47        56         30
82      1454         183     196  7057     1014        27        46         19
83      1347         194     197  7277      895        25        46         15
84      1364         204     225  6929     1084        21        50         14
85      1410         199     216  7130      955        21        48         19
86      1384         178     208  7105      999        29        67         26
87      1412         185     217  6842     1203        34        72         32
88      1410         232     280  6715     1233        32        60         24
89      1509         209     257  6647     1240        42        62         30
90      1317         197     256  7036     1067        40        60         22
91      1286         192     203  7132     1053        38        65         28
92      1273         191     202  6862     1303        43        70         28
93      1463         183     183  6747     1307        36        60         24
94      1399         187     191  6861     1233        38        60         17
95      1413         193     208  6875     1202        30        60         18
96      1369         206     203  6953     1168        35        50         16
97      1488         172     170  6920     1144        37        54         14
98      1323         160     205  6911     1298        24        50         17
99      1311         166     170  6902     1312        41        69         28
100     1286         163     183  7040     1230        29        57         12
101     1380         173     188  7038     1139        31        44         14
102     1394         164     223  7086     1042        24        43         23
103     1324         174     198  6863     1289        36        70         21
104     1290         157     192  7000     1263        26        51         19
105     1361         163     196  6888     1273        37        58         24
106     1387         182     242  6913     1101        44        68         30
107     1369         180     181  7000     1130        39        45         24
108     1303         165     175  7025     1243        31        41         16
109     1346         160     169  7072     1151        39        48         15
110     1369         171     184  6937     1246        30        48         15
111     1305         172     169  7004     1260        28        50         11
112     1351         179     186  6935     1243        36        50         19
113     1283         151     182  7000     1271        40        52         21
114     1449         175     198  6883     1162        40        70         22
115     1310         180     183  7054     1202        26        32         12
116     1360         163     176  6901     1280        28        65         27
117     1300         187     196  6920     1253        41        76         25
118     1368         171     218  7010     1057        41        54         26
119     1207         151     156  7159     1234        27        51         14
120     1348         154     183  6917     1277        48        56         16
121     1334         186     229  7261      827        34        56         20
122     1301         156     207  7003     1229        41        48         14
123     1226         181     213  6961     1230        47        74         26
124     1201         168     190  7100     1216        43        64         16
125     1297         153     177  7004     1260        35        60         16
126     1248         163     158  7103     1222        31        60         14
127     1335         159     197  6974     1220        36        60         17
128     1219         167     171  7087     1254        35        50         16
129     1318         179     177  7030     1194        35        42         25
130     1264         167     166  7130     1187        22        52         12
131     1201         175     201  7129     1193        36        49         15
132     1252         180     181  7055     1214        31        59         38
133     1273         182     209  6965     1191        43        74         23
134     1351         179     170  7034     1154        35        66         10
135     1336         155     212  7103     1086        33        55         20
136     1499         201     182  6803     1204        30        56         24
137     1425         198     193  7032     1041        31        52         17
138     1358         204     227  6962     1109        41        65         34
139     1346         181     257  7147      933        40        60         36
140     1392         186     256  6732     1278        53        64         29
141     1311         166     222  7006     1147        41        80         27
142     1314         171     229  6923     1198        47        76         42
143     1409         200     207  6842     1224        31        60         27
144     1342         174     221  6993     1147        36        64         23
145     1387         182     206  7100     1020        34        54         17
146     1413         202     205  6920     1165        36        46         13
147     1430         209     225  6800     1200        32        59         27
148     1336         185     223  6956     1155        56        73         16
149     1372         200     200  6916     1189        33        50         22
150     1330         157     228  7055     1108        42        55         25
151     1412         207     208  6822     1239        36        51         28
152     1321         209     217  6948     1178        42        62         23
153     1401         200     217  6980     1073        40        68         21
154     1401         214     217  6734     1293        44        69         27
155     1457         168     242  6724     1266        54        59         30
156     1451         199     221  6835     1177        37        51         29
157     1438         206     248  6806     1183        34        57         28
158     1462         204     237  6644     1309        42        54         28
159     1529         215     203  6602     1310        45        69         27
160     1510         189     245  6752     1188        36        52         28
161     1437         222     184  6803     1240        43        56         16
162     1327         129     247  7024     1157        38        56         22
163     1438         172     252  6630     1380        40        64         24
164     1447         176     189  6849     1180        42        64         26
165     1355         144     214  6972     1198        33        60         24
166     1369         156     241  6890     1209        42        63         30
167     1471         188     276  6697     1269        34        51         16
168     1456         179     240  6738     1267        41        65         14
169     1314         140     207  7020     1220        28        59         12
170     1408         176     192  6909     1195        45        50         25
171     1397         172     191  7107     1018        36        50         29
172     1413         191     186  6937     1180        31        46         13
173     1539         194     213  6764     1178        38        58         16
174     1304         159     234  7019     1174        38        53         19
175     1341         160     231  7033     1069        40        67         33
176     1508         208     249  6641     1311        25        43         20
177     1515         226     257  6595     1287        41        63         16
178     1262         165     235  7120     1113        32        51         21
179     1307         197     238  7003     1144        37        50         24
180     1294         159     253  7009     1190        30        52         13
181     1460         187     215  6843     1172        35        56         32
182     1476         187     203  6837     1197        36        48         22
183     1482         178     197  6814     1201        40        64         24
184     1388         176     185  7008     1111        48        53         31
185     1367         172     235  7066     1054        35        45         26
186     1272         207     205  7152     1098        37        52         22
187     1323         157     234  7132     1022        38        58         31
188     1206         218     242  7193     1002        37        54         25
189     1383         157     217  7018     1090        40        60         37
190     1521         190     238  6956      986        36        50         23
191     1350         168     227  6986     1165        29        58         17
192     1422         181     218  6813     1230        30        59         21
193     1298         166     224  6986     1162        34        65         31
194     1447         236     245  6607     1336        33        51         21
195     1347         197     211  6795     1300        32        59         34
196     1339         170     253  6989     1110        29        63         23
197     1388         183     216  6867     1208        28        61         21
198     1527         260     232  6488     1370        31        45         20
199     1495         237     236  6571     1318        32        58         26
200     1487         246     251  6504     1390        29        53         19
201     1399         180     232  6855     1190        32        66         22
202     1489         215     242  6777     1145        30        60         22
203     1339         166     226  6928     1198        30        60         23
204     1482         246     238  6444     1462        27        50         20
205     1434         172     255  6646     1354        27        59         25
206     1347         156     214  6850     1313        25        48         19
207     1340         158     233  6848     1272        32        63         25
208     1453         180     244  6752     1238        34        54         23
209     1306         149     226  7082     1097        33        61         24
210     1349         161     217  6997     1138        31        62         23
211     1254         151     205  7319      947        28        54         23
212     1168         144     220  7230     1109        31        52         28
213     1346         167     224  6959     1111        30        49         23
214     1390         184     212  6898     1189        29        44         19
215     1283         149     224  7077     1104        30        57         32
216     1214         137     232  7269     1005        32        55         23
217     1491         227     205  6941      988        33        68         34
218     1479         218     207  7039      887        36        65         36
219     1445         174     228  6875     1123        29        69         31
220     1439         183     218  6775     1226        32        66         29
221     1387         154     204  6991     1090        34        74         32
222     1426         169     192  7025     1043        31        64         27
223     1451         200     208  6980     1006        30        62         31
224     1493         204     188  6913     1044        32        61         35
225     1419         192     207  6996     1014        36        70         36
226     1342         177     199  7172      952        34        65         33
227     1349         152     236  7145      949        35        75         29
228     1440         196     208  6938     1070        32        61         26
229     1460         215     197  6918     1081        28        55         23
230     1249         133     205  7417      827        33        72         33
231     1348         159     238  7017     1081        31        67         25
232     1341         155     244  6958     1144        32        68         26
233     1398         149     204  7182      907        29        76         30
234     1454         200     199  6910     1090        30        62         25
235     1334         153     219  6928     1214        33        66         24
236     1438         204     189  7107      910        33        63         27
237     1303         138     212  7170     1016        34        69         25
238     1323         147     210  7108     1070        33        61         20
239     1417         169     207  6875     1184        34        57         27
240     1360         167     225  6883     1220        31        55         27
241     1420         179     214  6923     1121        33        56         27
242     1472         218     214  6724     1238        29        53         23
243     1368         174     205  7042     1066        31        57         26
244     1367         173     228  6948     1141        32        53         24
245     1403         173     209  6843     1210        33        63         33
246     1413         197     206  6737     1387        34        60         31
247     1201         138     207  7011     1269        37        64         35
248     1359         180     207  6895     1203        33        61         30
249     1518         198     225  6681     1243        29        57         24
250     1434         185     189  6771     1269        30        62         25
251     1367         162     179  6772     1368        33        64         27
252     1461         181     197  6783     1246        26        57         23
253     1368         161     198  7030     1095        33        59         31
254     1419         159     215  6862     1193        35        60         31
255     1514         162     298  6725     1119        45        93         30
256     1328         171     253  6987     1030        38        83         39
257     1469         160     337  6675     1127        44        94         36
258     1222         133     227  7425      824        36        69         35
259     1639         172     331  6510     1124        46        91         32
260     1345         133     272  6801     1194        48        83         37
261     1339         170     275  6838     1060        46        88         43
262     1194         135     263  7277      889        44        95         41
263     1112          68     375  7770      448        52        69         45
264     1222          70     329  7605      566        48        67         43
265     1136          72     341  7616      661        49        65         32
266      926          41     277  7815      784        45        65         25
267     1105          69     373  7714      532        51        68         37
268     1109          79     305  7576      763        45        64         36
269     1284          93     265  7235      893        43        77         46
270     1120          69     277  7416      946        42        59         36
271      916          52     281  7870      694        42        64         58
272      905          49     288  7747      812        49        71         56
273     1206          55     287  7329      935        44        74         42
274     1457         182     267  7020      863        41        84         37
275     1327         140     193  7328      823        36        87         35
276     1303         100     251  7045     1049        40        86         40
277     1444         175     259  6876     1027        34        78         32
278     1505         243     226  6962      858        30        72         27
279     1429         162     223  6917     1041        37        77         40
280     1491         162     211  6994      928        37        97         38
281     1393         128     211  7189      870        38        93         40
282     1404         134     210  7110      923        40       101         43
283     1222         130     214  7374      856        38        89         45
284     1153          74     316  7593      705        42        64         32
285     1169          76     307  7553      728        43        69         32
286     1369         104     237  7375      775        39        70         15
287      993          58     267  7743      773        41        62         44
288      980          53     254  7719      815        44        69         47
289      967          55     273  7692      833        45        63         47
290     1128          73     354  7527      728        44        76         38
291     1188          85     273  7445      814        44        73         42
292     1257          95     247  7405      812        43        70         35
293     1262          88     301  7471      704        43        71         31
294     1283         153     196  7107     1115        37        60         28
295     1263         155     199  7140     1148        31        42         18
296     1369         158     215  7160      958        38        69         32
297     1353         172     175  6965     1212        28        75         19
298     1187         139     185  7427      952        29        56         22
299     1732         231     156  6437     1313        45        62         23
300     1620         255     166  6628     1212        29        62         27
301     1543         172     193  6740     1157        52        87         34
302     1498         170     195  6804     1206        35        66         23
303     1399         169     171  7011     1100        36        72         16
304     1293         156     191  7101     1111        32        60         31
305     1420         175     152  7004     1149        27        50         20
306     1721         238     255  6300     1350        35        70         28
307     1742         221     156  6415     1315        43        82         23
308     1391         187     189  6975     1062        52        70         45
309     1517         206     249  6680     1205        33        80         27
310     1269         157     193  7140     1148        31        40         18
311     1577         204     208  6732     1183        20        52         20
312     1590         241     195  6705     1149        27        68         21
313     1621         280     197  6608     1179        28        58         27
314     1753         275     236  6367     1214        23        61         27
315     1679         260     177  6568     1191        30        59         33
316     1419         203     176  6973     1083        38        78         27
317     1693         236     174  6499     1204        51       102         37
318     1692         270     234  6499     1196        31        59         15
319     1638         252     215  6570     1199        39        53         29
320     1497         247     219  6621     1270        36        73         32
321     1442         222     194  6677     1314        36        72         38
322     1680         270     170  6440     1310        31        62         28
323     1463         164     185  6909     1154        49        58         17
324     1129         120     222  7272     1112        43        98          2
325     1042         135     210  7376     1116        35        90          3
326     1103          96     210  7380     1085        32        94          3
327     1118          97     221  7279     1154        35        94          2
328     1052          95     215  7388     1126        31        92          1
329     1116         102     231  7290     1168        26        66          1
330     1108         132     231  7319     1101        20        66          2
331     1129         108     212  7386     1074        28        62          3
332     1085          91     223  7384     1126        28        62          3
333     1104         103     233  7322     1147        27        61          2
334     1098          88     212  7338     1140        28        67          1
335     1135          98     251  7120     1314        20        61          2
336     1158         108     245  7065     1326        22        75          1
337     1133         110     241  7080     1342        21        68          3
338     1095         125     250  7120     1305        21        83          1
339     1201          87     238  6990     1383        25        75          3
340     1213         112     245  7007     1335        22        65          3
341     1108          92     231  7367     1110        29        62          3
342     1075         103     207  7413     1096        32        68          2
343     1059          96     228  7386     1128        25        72          2
344     1176          92     207  7347     1057        35        82          1
345     1159          98     213  7320     1108        38        64          1
346     1132          80     201  7398     1095        27        67          2
347     1107          75     220  7399     1096        29        90          1
348     1092         104     234  7355     1126        28        58          2
349     1119          81     219  7409     1057        33        81          2
350     1106          93     212  7381     1104        35        68          1
351     1047         101     238  7385     1120        28        89          1
352     1165          99     214  7331     1101        22        67          3
353     1158          84     201  7327     1123        29        77          2
354     1095          88     203  7415     1093        37        78          1
355     1176          75     205  7396     1107        33        74          2
356     1103         109     220  7335     1140        28        59          2
357     1112          92     209  7356     1125        32        73          2
358     1091          93     222  7377     1113        20        53          2
359     1080          98     219  7371     1125        33        78          1
360     1051         108     227  7403     1114        30        66          3
361     1096          84     211  7415     1091        30        71          2
362     1142          97     225  7341     1101        28        65          1
363     1047          96     236  7399     1107        32        80          3
364     1114          86     210  7359     1116        31        83          2
365     1140          93     241  7324     1098        23        74          1
366     1075          91     200  7410     1107        36        80          1
367     1092         106     219  7427     1125        33        77          1
368     1076          95     204  7408     1130        27        79          2
369     1178          89     201  7381     1099        34        87          2
370     1095         104     223  7367     1111        43        56          2
371     1166          97     272  6971     1390        20        83          3
372     1154         119     257  7130     1253        22        61          1
373     1177         111     241  6882     1470        22        95          2
374     1160          96     240  7043     1357        24        79          2
375     1122         104     241  7145     1313        15        58          1
376     1132          99     257  7065     1362        24        90          3
377     1096         100     260  7162     1282        25        74          2
378     1131          87     233  7144     1307        25        72          3
379     1184         105     258  7020     1340        26        66          2
380     1135          94     235  7123     1320        24        67          2
381     1084          96     240  7164     1330        28        57          1
382     1086         127     252  7159     1285        28        62          2
383     1140          95     258  7085     1347        23        71          3
384     1138         101     254  7103     1310        25        68          1
385     1159         110     261  7068     1297        27        77          2
386     1051          78     211  7421     1146        30        82          2
387     1048          79     213  7439     1130        28        61          2
388     1061          86     220  7421     1102        29        79          3
389     1105          88     210  7353     1142        28        72          1
390     1145          35     237  7208     1118        20        46          2
391     1049          96     219  7303     1168        22        47          2
392     1105         120     218  7302     1158        23        45          3
393     1030          84     214  7403     1177        21        70          1
394     1070          98     215  7280     1240        28        68          3
395     1103          81     208  7310     1177        30        90          3
396     1040         101     205  7368     1176        25        85          3
397     1100          95     210  7320     1113        22        72          3
398     1118          85     199  7415     1060        36        86          3
399     1065          98     230  7345     1163        24        74          1
400     1131          78     221  7358     1120        22        69          2
401     1080         120     218  7296     1145        35       105          2
402     1075          86     231  7403     1109        22        73          3
403     1040         103     228  7364     1173        25        66          2
404     1128          82     203  7320     1148        30        88          1
405     1060         111     231  7363     1149        20        65          1
406     1103          78     220  7365     1149        20        65          2
407     1110          91     201  7318     1185        24        74          2
408     1091         108     218  7383     1183        28        88          3
409     1094          96     220  7341     1127        26        96          2
410     1131          87     208  7170     1308        28        57          2
411     1175         108     214  7076     1307        33        85          2
412     1076          77     202  7243     1305        29        67          1
413     1120          90     240  7068     1383        23        75          1
414     1152         111     238  7080     1372        25        81          2
415     1141          95     250  7035     1388        22        68          2
416     1098         103     267  7135     1301        24        76          2
417     1126         100     236  7062     1380        26        69          1
418     1087          89     243  7200     1302        18        60          1
419     1115          96     236  7085     1372        20        75          2
420     1178          92     241  7006     1376        22        84          1
421     1162         106     242  7025     1368        25        71          2
422     1085          70     180  7955      605        20        50          1
423     1085          70     185  7955      600        25        55          1
424     1090          60     190  7950      600        28        47          2
425     1080          65     189  7960      602        35        20          1
426     1090          60     195  7955      600        28        42          2
427     1105          55     200  7900      600        37        55          2
428     1060          75     175  7975      610        20        55          2
429     1050          70     170  7977      605        28        65          1
430     1100          55     198  7905      600        35        50          3
431     1065          65     178  7965      605        22        65          2
432     1085          60     188  7955      602        30        50          2
433     1080          65     180  7960      605        25        55          1
434     1085          60     190  7955      602        30        53          1
435     1075          68     195  7960      602        20        40          3
436     1090          58     192  7950      600        35        40          3
437     1095          60     198  7945      600        38        34          2
438     1090          58     195  7950      600        30        42          2
439     1095          58     198  7950      602        35        32          1
440     1090          58     195  7940      600        35        42          2
441     1095          58     198  7945      600        35        34          1
442     1095          55     200  7940      600        35        45          3
443     1080          70     188  7965      608        28        36          3
444     1090          60     195  7950      600        32        38          2
445     1105          55     200  7900      595        39        56          1
446     1110          50     205  7900      595        40        52          1
447     1075          70     198  7978      608        28        33          2
448     1075          65     185  7980      608        35        42          3
449     1065          75     180  7975      610        25        50          3
450     1070          75     188  7980      602        22        45          2
451     1070          75     188  7980      602        22        45          1
452     1100          70     200  7910      610        39        44          1
453     1075          70     185  7960      610        22        58          2
454     1050          78     175  7990      610        18        59          3
455     1090          60     198  7945      600        32        35          2
456     1050          78     188  7990      608        28        23          3
457     1075          70     190  7975      605        28        27          3
458     1098          54     202  7945      595        42        32          2
459     1105          15     198  8005      575        52        20          2
460     1110          75     220  7915      510        55        65          2
461     1058          50     178  7988      626        40        55          3
462     1115          30     225  7955      600        55        15          2
463     1105          30     198  7995      570        52        20          3
464     1072          49     178  7980      615        48        48          2
465     1110          15     210  7990      570        50        20          2
466     1110          80     215  7910      525        50        60          1
467     1055          60     175  7985      620        45        50          1
468     1100          80     215  7930      535        45        60          2
469     1105          55     205  7965      600        25        20          2
470     1095          50     210  7948      600        25        35          2
471     1110          50     220  7950      600        52        10          2
472     1092          37     210  7955      600        40        40          3
473     1290          60     260  7550      670        70       100          2
474     1170          80     230  7690      720        40        70          1
475     1100          90     250  7680      760        30        80          2
476     1120          70     240  7720      730        40        80          2
477     1160          70     250  7650      750        30        90          1
478     1200          50     210  7770      690        20        50          3
479     1140          50     200  7990      580        10        20          1
480     1220          80     240  7610      760        30        60          2
481     1180          90     250  7520      800        50       100          2
482     1210          70     250  7560      780        40        90          2
483     1220          80     220  7540      770        60       100          2
484     1180         100     190  7520      820        50       100          1
485     1160          90     220  7580      790        40        90          1
486     1130         100     240  7620      780        30        90          1
487     1080         100     260  7710      750        20        70          2
488     1090          90     280  7730      720        50       100          1
489     1020         100     270  7770      710        40        90          1
490     1090          90     250  7680      760        60        80          1
491     1120         100     260  7720      680        30        80          2
492     1080          80     240  7830      670        30        70          2
493     1160          70     230  7860      640        10        20          1
494     1100          80     240  7820      670        20        70          2
495     1050         100     250  7930      630        10        30          3
496     1090          90     270  7780      690        30        50          3
497     1120          80     260  7750      680        30        80          3
498     1120         100     250  7680      730        40        70          2
499     1190          90     230  7670      710        30        80          2
500     1170         110     250  7620      740        20        90          1
501     1120         100     230  7720      730        20        70          1
502     1190          80     270  7690      720        10        40          2
503     1400          90     270  7420      800         0        20          2
504     1350          80     250  7520      760        10        30          1
505     1090          60     220  7890      670        10        60          2
506     1150          90     230  7790      650        30        60          1
507     1240          90     220  7820      590        10        30          1
508     1220         100     240  7890      530         0        10          2
509     1180          80     250  7870      580        10        30          2
510     1170         110     240  7730      630        30        90          1
511     1170         100     280  7710      640        20        70          3
512     1180          80     220  7790      680        10        40          1
513     1200          90     240  7820      590        10        50          2
514     1140          90     240  7880      570        20        60          3
515     1160          70     210  7870      580        30        80          3
516     1130          80     250  7780      650        40        60          3
517     1150          80     240  7800      630        30        70          2
518     1110          70     240  7820      670        20        70          3
519     1150          70     220  7850      620        20        40          2
520     1180          80     240  7760      670        20        50          2
521     1020          80     250  7920      680        10        30          3
522      610          80     230  8410      650         0        20          3
523     1190         150     290  7340     1020         0        10          2
524     1110         130     210  7550     1000         0         0          1
525     1020         100     220  7530     1030         0         0          3
526     1070         120     210  7600      990         0        10          3
527     1010          90     350  7480     1050        10        10          1
528     1060         140     240  7680      830        10        40          2
529     1060         140     270  7620      880        10        20          1
530     1030         100     230  7740      900         0         0          2
531     1120         130     250  7530      970         0         0          3
532     1030         110     220  7760      980         0         0          2
533     1070         100     230  7600      990        10         0          1
534     1140         180     220  7610      850        10        10          2
535     1090         180     230  7590      860        10        40          2
536      980         110     300  7720      910        10         0          3
537      980          90     330  7540     1040         0         0          2
538      960          90     200  7810      940         0         0          2
539      990          90     210  7780      930         0         0          2
540     1060         120     210  7600     1010         0         0          1
541     1240         150     250  7610      730        10        10          1
542     1060          90     310  7850      690         0         0          2
543     1020         100     290  7620      960         0        10          2
544      970          90     220  7700     1020         0         0          3
545     1180         130     220  7450     1010         0        10          2
546     1060         140     240  7690      850        10        10          1
547      990         100     250  7630     1030         0         0          3
548     1010          90     350  7630      940        10         0          3
549     1040          90     250  7780      820        10        10          1
550     1040          90     250  7810      810        10        10          2
551     1020          90     350  7620      920        10         0          3
552     1020          90     260  7620     1010         0         0          3
553     1010          90     350  7610      930        10         0          3
554      920         110     340  7720      910         0         0          3
555     1030         100     250  7710      900         0        10          2
556      960          90     300  7820      830         0         0          3
557     1030         110     210  7810      840         0         0          1
558     1010         100     240  7710      910        10        20          2
559     1020          90     240  7800      850         0         0          2
560     1120          90     300  7650      830         0        10          1
561     1090          90     290  7710      800        10         0          2
562     1100         120     280  7630      770        10        10          2
563     1090          80     240  7820      760        10         0          2
564     1150          90     250  7720      810         0        10          3
565     1110          90     230  7810      750         0        10          2
566     1010         110     210  7720      950         0         0          1
567     1070         100     220  7730      870        10        10          2
568     1280         110     290  7490      790        10        10          2
569     1060         100     270  7740      810        10        10          3
570     1010          90     210  7720      970         0         0          2
571      990         120     250  7750      870        10        10          2
572      960          80     240  7950      740        10        20          2
> m('grid')
                       x y
palmitic*palmitoleic   1 2
palmitic*stearic       1 3
palmitic*oleic         1 4
palmitic*linoleic      1 5
palmitic*linolenic     1 6
palmitic*arachidic     1 7
palmitic*eicosenoic    1 8
palmitoleic*stearic    2 3
palmitoleic*oleic      2 4
palmitoleic*linoleic   2 5
palmitoleic*linolenic  2 6
palmitoleic*arachidic  2 7
palmitoleic*eicosenoic 2 8
stearic*oleic          3 4
stearic*linoleic       3 5
stearic*linolenic      3 6
stearic*arachidic      3 7
stearic*eicosenoic     3 8
oleic*linoleic         4 5
oleic*linolenic        4 6
oleic*arachidic        4 7
oleic*eicosenoic       4 8
linoleic*linolenic     5 6
linoleic*arachidic     5 7
linoleic*eicosenoic    5 8
linolenic*arachidic    6 7
linolenic*eicosenoic   6 8
arachidic*eicosenoic   7 8
> m('measures')
[1] "cov" "cor"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("measures2d", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ndtransitiongraph")
> ### * ndtransitiongraph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ndtransitiongraph
> ### Title: Create a n-d transition graph
> ### Aliases: ndtransitiongraph
> 
> ### ** Examples
> 
> g <- ndtransitiongraph(nodes=c('A:B', 'A:F', 'B:C', 'B:F'), n=3, separator=':')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ndtransitiongraph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.loongraph")
> ### * plot.loongraph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.loongraph
> ### Title: Plot a loon graph object with base R graphics
> ### Aliases: plot.loongraph
> 
> ### ** Examples
> 
> library(Rgraphviz)
Loading required package: graph
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min


Attaching package: ‘graph’

The following object is masked from ‘package:loon’:

    complement

Loading required package: grid
> g <- loongraph(letters[1:4], letters[1:3], letters[2:4], FALSE)
> plot(g)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.loongraph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:Rgraphviz’, ‘package:grid’, ‘package:graph’,
  ‘package:BiocGenerics’, ‘package:parallel’

> nameEx("scagnostics2d")
> ### * scagnostics2d
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: scagnostics2d
> ### Title: Closure of Two Dimensional Scagnostic Measures
> ### Aliases: scagnostics2d
> 
> ### ** Examples
> 
> m <- scagnostics2d(oliveAcids, separator='**')
> m
2d measure closure with measures: Clumpy, Monotonic, Convex, Stringy, Skinny, Outlying, Sparse, Striated, Skewed 
> m()
                            Clumpy    Monotonic    Convex   Stringy    Skinny
palmitic**palmitoleic   0.01425229 0.7131561952 0.4895179 0.3770978 0.5928461
palmitic**stearic       0.01101357 0.0230374600 0.4634277 0.4250549 0.5185595
palmitoleic**stearic    0.01338461 0.0340579036 0.4227608 0.3255801 0.5106035
palmitic**oleic         0.02674608 0.6886662299 0.4588675 0.3790071 0.5791038
palmitoleic**oleic      0.07907871 0.7604480521 0.5049945 0.3355796 0.5497264
stearic**oleic          0.01641016 0.0169814793 0.3970041 0.3982241 0.6132439
palmitic**linoleic      0.15084805 0.2045148914 0.4391385 0.3745685 0.6759877
palmitoleic**linoleic   0.03259239 0.4049522790 0.4459099 0.3547502 0.6078826
stearic**linoleic       0.01352852 0.0167536401 0.3639386 0.4130862 0.6200110
oleic**linoleic         0.06402728 0.6952411414 0.4645377 0.3172262 0.6911533
palmitic**linolenic     0.07205040 0.0972822131 0.3458328 0.3436206 0.5114254
palmitoleic**linolenic  0.03614753 0.0069095128 0.3585514 0.3852117 0.6008588
stearic**linolenic      0.03003146 0.0106600134 0.3131618 0.4372330 0.4971974
oleic**linolenic        0.06699296 0.0246989686 0.3661617 0.4250549 0.5469986
linoleic**linolenic     0.06679762 0.0174298036 0.3197743 0.3587075 0.5886555
palmitic**arachidic     0.04941860 0.0029238090 0.3125864 0.4508620 0.5925957
palmitoleic**arachidic  0.03789947 0.0006400362 0.3584617 0.3943704 0.5962283
stearic**arachidic      0.01547567 0.0832209220 0.2953410 0.3813791 0.3994143
oleic**arachidic        0.03368691 0.0247488319 0.2945068 0.3591879 0.6350942
linoleic**arachidic     0.03814646 0.0263623924 0.3144349 0.4389760 0.6641449
linolenic**arachidic    0.01249447 0.0300928166 0.5372599 0.3338130 0.2975492
palmitic**eicosenoic    0.54359618 0.2182734028 0.2841262 0.3746966 0.6270499
palmitoleic**eicosenoic 0.61015852 0.1263523157 0.3172912 0.3275982 0.6782262
stearic**eicosenoic     0.50478671 0.0148016384 0.3370857 0.3752913 0.6635034
oleic**eicosenoic       0.67526201 0.1659114322 0.3488843 0.3692056 0.6257183
linoleic**eicosenoic    0.52271794 0.0061498845 0.3675037 0.3446924 0.6690843
linolenic**eicosenoic   0.10324578 0.3656478864 0.3400124 0.3996403 0.5383925
arachidic**eicosenoic   0.32343143 0.0449068060 0.2223074 0.3339375 0.6671368
                         Outlying     Sparse   Striated    Skewed
palmitic**palmitoleic   0.1968156 0.03124153 0.03767123 0.7710213
palmitic**stearic       0.2868045 0.03757719 0.08383234 0.7762938
palmitoleic**stearic    0.2024907 0.03735658 0.03174603 0.7407374
palmitic**oleic         0.1292836 0.02350361 0.09183673 0.6447683
palmitoleic**oleic      0.1683410 0.03118636 0.06752412 0.7713746
stearic**oleic          0.1516664 0.03629985 0.05882353 0.7679198
palmitic**linoleic      0.2196114 0.03158142 0.08791209 0.7276075
palmitoleic**linoleic   0.1153506 0.03443006 0.04712042 0.7284701
stearic**linoleic       0.2239858 0.03458974 0.09589041 0.7359344
oleic**linoleic         0.1488830 0.02762595 0.05846154 0.6764282
palmitic**linolenic     0.2834520 0.03269589 0.06730769 0.7663601
palmitoleic**linolenic  0.1518289 0.03320802 0.08069164 0.7188376
stearic**linolenic      0.1098458 0.03660220 0.07183908 0.8113395
oleic**linolenic        0.1789577 0.03405794 0.13392857 0.7637125
linoleic**linolenic     0.2380798 0.03486741 0.11111111 0.7719891
palmitic**arachidic     0.3186501 0.03705109 0.09841270 0.8076435
palmitoleic**arachidic  0.1106750 0.03591834 0.06284153 0.7328696
stearic**arachidic      0.3788348 0.04067559 0.06824926 0.7801462
oleic**arachidic        0.2541043 0.03763214 0.07621951 0.7699807
linoleic**arachidic     0.1748544 0.03548423 0.10582011 0.7389606
linolenic**arachidic    0.3015721 0.04094564 0.05119454 0.8173643
palmitic**eicosenoic    0.1580137 0.03686472 0.06137184 0.8295163
palmitoleic**eicosenoic 0.1101226 0.03580309 0.04153355 0.7744464
stearic**eicosenoic     0.2135861 0.03823138 0.06050955 0.8204095
oleic**eicosenoic       0.1921095 0.03697665 0.05980066 0.8094346
linoleic**eicosenoic    0.1636049 0.03607143 0.05763689 0.7825297
linolenic**eicosenoic   0.2591588 0.03435997 0.03409091 0.7855669
arachidic**eicosenoic   0.3298040 0.03131860 0.04270463 0.8115732
> m(olive$palmitoleic > 80)
                            Clumpy    Monotonic    Convex   Stringy    Skinny
palmitic**palmitoleic   0.04069442 7.062809e-01 0.5033377 0.3634385 0.5290257
palmitic**stearic       0.07450723 6.664003e-02 0.4569156 0.3912674 0.3226290
palmitoleic**stearic    0.01707722 1.340399e-01 0.4227197 0.3875539 0.5165220
palmitic**oleic         0.03778545 6.637239e-01 0.4705336 0.3299209 0.5808469
palmitoleic**oleic      0.01653251 6.504807e-01 0.5169097 0.3700669 0.5560400
stearic**oleic          0.03462429 1.058561e-01 0.4740986 0.3653103 0.5652514
palmitic**linoleic      0.08368378 5.904411e-02 0.4449712 0.3389167 0.7002940
palmitoleic**linoleic   0.05139915 1.373574e-01 0.4726790 0.3458904 0.6292981
stearic**linoleic       0.01614480 1.091685e-01 0.4308802 0.3600052 0.5206806
oleic**linoleic         0.03062901 5.050946e-01 0.4718807 0.2982161 0.6866455
palmitic**linolenic     0.08630748 2.734359e-01 0.3565345 0.3685727 0.4183583
palmitoleic**linolenic  0.02775336 9.064178e-02 0.4281557 0.3477201 0.4756825
stearic**linolenic      0.02739153 3.297521e-05 0.3326699 0.2922742 0.5031419
oleic**linolenic        0.04789746 9.002379e-02 0.3239734 0.3500477 0.4767158
linoleic**linolenic     0.01610092 2.157762e-02 0.3049432 0.3525272 0.5496525
palmitic**arachidic     0.13920180 8.313148e-04 0.3050271 0.4200823 0.5100589
palmitoleic**arachidic  0.05434499 1.111878e-01 0.3355257 0.3430000 0.6122028
stearic**arachidic      0.12390887 1.483367e-03 0.3025870 0.3245609 0.4440822
oleic**arachidic        0.12941078 9.001504e-04 0.3377390 0.3095614 0.5604120
linoleic**arachidic     0.10675670 6.928758e-03 0.3521269 0.3810781 0.6376349
linolenic**arachidic    0.01708442 1.286504e-02 0.6611286 0.3702779 0.3044834
palmitic**eicosenoic    0.66414095 3.986902e-01 0.3991848 0.3725901 0.4959260
palmitoleic**eicosenoic 0.52651171 2.273355e-01 0.4357867 0.3270760 0.5988137
stearic**eicosenoic     0.58776492 4.408240e-03 0.3389819 0.3927430 0.5851448
oleic**eicosenoic       0.51127309 2.456961e-01 0.4124703 0.4101569 0.5190040
linoleic**eicosenoic    0.44635407 1.746666e-03 0.3707276 0.3952384 0.6440327
linolenic**eicosenoic   0.19065230 4.210924e-01 0.3224564 0.4102002 0.5587338
arachidic**eicosenoic   0.40513301 6.167198e-03 0.2336353 0.3254203 0.6109833
                          Outlying     Sparse   Striated    Skewed
palmitic**palmitoleic   0.16393175 0.03539675 0.06643357 0.6787848
palmitic**stearic       0.30799429 0.04669668 0.08116883 0.7730925
palmitoleic**stearic    0.15887648 0.04466935 0.05900621 0.7539974
palmitic**oleic         0.10246603 0.03267569 0.08143322 0.7145164
palmitoleic**oleic      0.11959698 0.04025389 0.06493506 0.7603024
stearic**oleic          0.15464808 0.04602265 0.04923077 0.7773676
palmitic**linoleic      0.12964516 0.03908659 0.05722892 0.7090567
palmitoleic**linoleic   0.14599624 0.04255438 0.05654762 0.7661287
stearic**linoleic       0.16651997 0.04296818 0.07187500 0.7528672
oleic**linoleic         0.10213862 0.03584068 0.04792332 0.7267987
palmitic**linolenic     0.33629135 0.04079274 0.09057971 0.7915283
palmitoleic**linolenic  0.15108420 0.04187660 0.06597222 0.7779529
stearic**linolenic      0.07967032 0.04342141 0.05743243 0.8038880
oleic**linolenic        0.22583882 0.04101364 0.11870504 0.7705014
linoleic**linolenic     0.25129030 0.04139738 0.14583333 0.7796959
palmitic**arachidic     0.27113640 0.04251898 0.10135135 0.7749456
palmitoleic**arachidic  0.20101743 0.04352533 0.07142857 0.7492379
stearic**arachidic      0.18473599 0.04664828 0.09933775 0.7912879
oleic**arachidic        0.37421950 0.05338505 0.07380074 0.8321848
linoleic**arachidic     0.20929595 0.04500522 0.11038961 0.7967624
linolenic**arachidic    0.29121059 0.03599790 0.06198347 0.7342333
palmitic**eicosenoic    0.38175067 0.04197538 0.06882591 0.7672492
palmitoleic**eicosenoic 0.12531484 0.04553745 0.05434783 0.7382368
stearic**eicosenoic     0.45168545 0.04581768 0.07874016 0.7544956
oleic**eicosenoic       0.27957291 0.04273095 0.06545455 0.7133764
linoleic**eicosenoic    0.08400139 0.04166028 0.04375000 0.7121763
linolenic**eicosenoic   0.25546624 0.03818030 0.05194805 0.7700823
arachidic**eicosenoic   0.24657963 0.04187660 0.09163347 0.7881360
> m('data')
    palmitic palmitoleic stearic oleic linoleic linolenic arachidic eicosenoic
1       1075          75     226  7823      672        36        60         29
2       1088          73     224  7709      781        31        61         29
3        911          54     246  8113      549        31        63         29
4        966          57     240  7952      619        50        78         35
5       1051          67     259  7771      672        50        80         46
6        911          49     268  7924      678        51        70         44
7        922          66     264  7990      618        49        56         29
8       1100          61     235  7728      734        39        64         35
9       1082          60     239  7745      709        46        83         33
10      1037          55     213  7944      633        26        52         30
11      1051          35     219  7978      605        21        65         24
12      1036          59     235  7868      661        30        62         44
13      1074          70     214  7728      747        50        79         33
14       875          52     243  8018      655        41        79         32
15       952          49     254  7795      780        50        75         41
16      1155          98     201  7606      816        32        60         29
17       943          94     183  7840      788        42        75         31
18      1278          69     205  7344      957        45        70         28
19       961          70     195  7958      742        46        75         30
20       952          77     258  7820      736        43        78         33
21      1074          67     236  7692      716        56        83         45
22       995          46     288  7806      679        56        86         40
23      1056          53     247  7703      700        54        89         51
24      1065          39     234  7876      703        42        74         26
25      1065          45     245  7779      696        47        82         38
26      1315         139     230  7299      832        42        60         32
27      1321         136     217  7174      950        43        63         30
28      1359         115     246  7234      874        45        63         18
29      1378         111     272  7127      940        46        64         23
30      1295         109     245  7253      903        43        62         38
31      1275         121     215  7285      892        40        68         41
32      1336         120     318  7083      915        50        70         38
33      1309         122     241  7257      870        46        72         35
34      1340         114     189  7337      820        48        72         21
35      1299         116     253  7309      823        40        69         27
36      1221         107     221  7441      798        54        70         28
37      1245          72     283  7395      829        44        67         28
38      1285         129     244  7323      819        57        65         36
39      1248         107     313  7299      840        46        66         33
40      1356         106     236  7209      866        48        75         36
41      1260         102     228  7354      870        49        64         28
42      1261         121     312  7238      877        47        65         25
43      1304         124     279  7160      928        48        61         37
44      1344         117     287  7129      897        51        65         41
45      1323          96     300  7351      757        47        54         26
46      1292         117     215  7351      839        48        61         32
47      1254         118     244  7394      786        46        71         24
48      1312         131     259  7167      939        41        69         20
49      1213         109     301  7261      925        47        65         31
50      1359          98     351  7262      780        41        56         16
51      1266          97     263  7435      743        45        69         29
52      1298          99     311  7311      787        45        67         23
53      1272         116     279  7258      872        43        72         27
54      1278          87     332  7379      771        44        53         24
55      1184         112     311  7391      819        48        57         28
56      1382         110     268  7241      828        39        60         30
57      1183         146     292  7580      618        38        51         23
58      1261         153     219  7355      818        52        70         26
59      1198         136     239  7639      633        27        55         19
60      1225         134     232  7658      616        36        49         26
61      1339         166     208  7190      923        40        69         25
62      1132         157     240  7641      638        45        60         31
63      1381         183     245  7385      609        47        70         25
64      1409         128     257  7257      759        43        57         16
65      1306         127     250  7254      869        47        68         24
66      1372         120     250  7355      702        44        68         28
67      1336         113     242  7293      855        38        60         18
68      1401         151     238  7164      857        45        72         36
69      1390         119     234  7236      823        40        62         41
70      1432         152     281  7029      949        39        55         25
71      1412         124     298  7182      790        45        68         28
72      1366         147     291  7197      783        51        70         34
73      1383         118     273  7282      738        45        68         29
74      1283         102     263  7400      763        54        65         28
75      1296         136     260  7380      780        48        51         18
76      1287         108     287  7343      826        44        44         23
77      1351         159     296  7229      810        36        60         22
78      1241          97     268  7499      709        52        69         36
79      1267         101     300  7230      898        74        65         34
80      1235         138     252  7322      861        54        66         36
81      1255         103     223  7395      848        47        56         30
82      1454         183     196  7057     1014        27        46         19
83      1347         194     197  7277      895        25        46         15
84      1364         204     225  6929     1084        21        50         14
85      1410         199     216  7130      955        21        48         19
86      1384         178     208  7105      999        29        67         26
87      1412         185     217  6842     1203        34        72         32
88      1410         232     280  6715     1233        32        60         24
89      1509         209     257  6647     1240        42        62         30
90      1317         197     256  7036     1067        40        60         22
91      1286         192     203  7132     1053        38        65         28
92      1273         191     202  6862     1303        43        70         28
93      1463         183     183  6747     1307        36        60         24
94      1399         187     191  6861     1233        38        60         17
95      1413         193     208  6875     1202        30        60         18
96      1369         206     203  6953     1168        35        50         16
97      1488         172     170  6920     1144        37        54         14
98      1323         160     205  6911     1298        24        50         17
99      1311         166     170  6902     1312        41        69         28
100     1286         163     183  7040     1230        29        57         12
101     1380         173     188  7038     1139        31        44         14
102     1394         164     223  7086     1042        24        43         23
103     1324         174     198  6863     1289        36        70         21
104     1290         157     192  7000     1263        26        51         19
105     1361         163     196  6888     1273        37        58         24
106     1387         182     242  6913     1101        44        68         30
107     1369         180     181  7000     1130        39        45         24
108     1303         165     175  7025     1243        31        41         16
109     1346         160     169  7072     1151        39        48         15
110     1369         171     184  6937     1246        30        48         15
111     1305         172     169  7004     1260        28        50         11
112     1351         179     186  6935     1243        36        50         19
113     1283         151     182  7000     1271        40        52         21
114     1449         175     198  6883     1162        40        70         22
115     1310         180     183  7054     1202        26        32         12
116     1360         163     176  6901     1280        28        65         27
117     1300         187     196  6920     1253        41        76         25
118     1368         171     218  7010     1057        41        54         26
119     1207         151     156  7159     1234        27        51         14
120     1348         154     183  6917     1277        48        56         16
121     1334         186     229  7261      827        34        56         20
122     1301         156     207  7003     1229        41        48         14
123     1226         181     213  6961     1230        47        74         26
124     1201         168     190  7100     1216        43        64         16
125     1297         153     177  7004     1260        35        60         16
126     1248         163     158  7103     1222        31        60         14
127     1335         159     197  6974     1220        36        60         17
128     1219         167     171  7087     1254        35        50         16
129     1318         179     177  7030     1194        35        42         25
130     1264         167     166  7130     1187        22        52         12
131     1201         175     201  7129     1193        36        49         15
132     1252         180     181  7055     1214        31        59         38
133     1273         182     209  6965     1191        43        74         23
134     1351         179     170  7034     1154        35        66         10
135     1336         155     212  7103     1086        33        55         20
136     1499         201     182  6803     1204        30        56         24
137     1425         198     193  7032     1041        31        52         17
138     1358         204     227  6962     1109        41        65         34
139     1346         181     257  7147      933        40        60         36
140     1392         186     256  6732     1278        53        64         29
141     1311         166     222  7006     1147        41        80         27
142     1314         171     229  6923     1198        47        76         42
143     1409         200     207  6842     1224        31        60         27
144     1342         174     221  6993     1147        36        64         23
145     1387         182     206  7100     1020        34        54         17
146     1413         202     205  6920     1165        36        46         13
147     1430         209     225  6800     1200        32        59         27
148     1336         185     223  6956     1155        56        73         16
149     1372         200     200  6916     1189        33        50         22
150     1330         157     228  7055     1108        42        55         25
151     1412         207     208  6822     1239        36        51         28
152     1321         209     217  6948     1178        42        62         23
153     1401         200     217  6980     1073        40        68         21
154     1401         214     217  6734     1293        44        69         27
155     1457         168     242  6724     1266        54        59         30
156     1451         199     221  6835     1177        37        51         29
157     1438         206     248  6806     1183        34        57         28
158     1462         204     237  6644     1309        42        54         28
159     1529         215     203  6602     1310        45        69         27
160     1510         189     245  6752     1188        36        52         28
161     1437         222     184  6803     1240        43        56         16
162     1327         129     247  7024     1157        38        56         22
163     1438         172     252  6630     1380        40        64         24
164     1447         176     189  6849     1180        42        64         26
165     1355         144     214  6972     1198        33        60         24
166     1369         156     241  6890     1209        42        63         30
167     1471         188     276  6697     1269        34        51         16
168     1456         179     240  6738     1267        41        65         14
169     1314         140     207  7020     1220        28        59         12
170     1408         176     192  6909     1195        45        50         25
171     1397         172     191  7107     1018        36        50         29
172     1413         191     186  6937     1180        31        46         13
173     1539         194     213  6764     1178        38        58         16
174     1304         159     234  7019     1174        38        53         19
175     1341         160     231  7033     1069        40        67         33
176     1508         208     249  6641     1311        25        43         20
177     1515         226     257  6595     1287        41        63         16
178     1262         165     235  7120     1113        32        51         21
179     1307         197     238  7003     1144        37        50         24
180     1294         159     253  7009     1190        30        52         13
181     1460         187     215  6843     1172        35        56         32
182     1476         187     203  6837     1197        36        48         22
183     1482         178     197  6814     1201        40        64         24
184     1388         176     185  7008     1111        48        53         31
185     1367         172     235  7066     1054        35        45         26
186     1272         207     205  7152     1098        37        52         22
187     1323         157     234  7132     1022        38        58         31
188     1206         218     242  7193     1002        37        54         25
189     1383         157     217  7018     1090        40        60         37
190     1521         190     238  6956      986        36        50         23
191     1350         168     227  6986     1165        29        58         17
192     1422         181     218  6813     1230        30        59         21
193     1298         166     224  6986     1162        34        65         31
194     1447         236     245  6607     1336        33        51         21
195     1347         197     211  6795     1300        32        59         34
196     1339         170     253  6989     1110        29        63         23
197     1388         183     216  6867     1208        28        61         21
198     1527         260     232  6488     1370        31        45         20
199     1495         237     236  6571     1318        32        58         26
200     1487         246     251  6504     1390        29        53         19
201     1399         180     232  6855     1190        32        66         22
202     1489         215     242  6777     1145        30        60         22
203     1339         166     226  6928     1198        30        60         23
204     1482         246     238  6444     1462        27        50         20
205     1434         172     255  6646     1354        27        59         25
206     1347         156     214  6850     1313        25        48         19
207     1340         158     233  6848     1272        32        63         25
208     1453         180     244  6752     1238        34        54         23
209     1306         149     226  7082     1097        33        61         24
210     1349         161     217  6997     1138        31        62         23
211     1254         151     205  7319      947        28        54         23
212     1168         144     220  7230     1109        31        52         28
213     1346         167     224  6959     1111        30        49         23
214     1390         184     212  6898     1189        29        44         19
215     1283         149     224  7077     1104        30        57         32
216     1214         137     232  7269     1005        32        55         23
217     1491         227     205  6941      988        33        68         34
218     1479         218     207  7039      887        36        65         36
219     1445         174     228  6875     1123        29        69         31
220     1439         183     218  6775     1226        32        66         29
221     1387         154     204  6991     1090        34        74         32
222     1426         169     192  7025     1043        31        64         27
223     1451         200     208  6980     1006        30        62         31
224     1493         204     188  6913     1044        32        61         35
225     1419         192     207  6996     1014        36        70         36
226     1342         177     199  7172      952        34        65         33
227     1349         152     236  7145      949        35        75         29
228     1440         196     208  6938     1070        32        61         26
229     1460         215     197  6918     1081        28        55         23
230     1249         133     205  7417      827        33        72         33
231     1348         159     238  7017     1081        31        67         25
232     1341         155     244  6958     1144        32        68         26
233     1398         149     204  7182      907        29        76         30
234     1454         200     199  6910     1090        30        62         25
235     1334         153     219  6928     1214        33        66         24
236     1438         204     189  7107      910        33        63         27
237     1303         138     212  7170     1016        34        69         25
238     1323         147     210  7108     1070        33        61         20
239     1417         169     207  6875     1184        34        57         27
240     1360         167     225  6883     1220        31        55         27
241     1420         179     214  6923     1121        33        56         27
242     1472         218     214  6724     1238        29        53         23
243     1368         174     205  7042     1066        31        57         26
244     1367         173     228  6948     1141        32        53         24
245     1403         173     209  6843     1210        33        63         33
246     1413         197     206  6737     1387        34        60         31
247     1201         138     207  7011     1269        37        64         35
248     1359         180     207  6895     1203        33        61         30
249     1518         198     225  6681     1243        29        57         24
250     1434         185     189  6771     1269        30        62         25
251     1367         162     179  6772     1368        33        64         27
252     1461         181     197  6783     1246        26        57         23
253     1368         161     198  7030     1095        33        59         31
254     1419         159     215  6862     1193        35        60         31
255     1514         162     298  6725     1119        45        93         30
256     1328         171     253  6987     1030        38        83         39
257     1469         160     337  6675     1127        44        94         36
258     1222         133     227  7425      824        36        69         35
259     1639         172     331  6510     1124        46        91         32
260     1345         133     272  6801     1194        48        83         37
261     1339         170     275  6838     1060        46        88         43
262     1194         135     263  7277      889        44        95         41
263     1112          68     375  7770      448        52        69         45
264     1222          70     329  7605      566        48        67         43
265     1136          72     341  7616      661        49        65         32
266      926          41     277  7815      784        45        65         25
267     1105          69     373  7714      532        51        68         37
268     1109          79     305  7576      763        45        64         36
269     1284          93     265  7235      893        43        77         46
270     1120          69     277  7416      946        42        59         36
271      916          52     281  7870      694        42        64         58
272      905          49     288  7747      812        49        71         56
273     1206          55     287  7329      935        44        74         42
274     1457         182     267  7020      863        41        84         37
275     1327         140     193  7328      823        36        87         35
276     1303         100     251  7045     1049        40        86         40
277     1444         175     259  6876     1027        34        78         32
278     1505         243     226  6962      858        30        72         27
279     1429         162     223  6917     1041        37        77         40
280     1491         162     211  6994      928        37        97         38
281     1393         128     211  7189      870        38        93         40
282     1404         134     210  7110      923        40       101         43
283     1222         130     214  7374      856        38        89         45
284     1153          74     316  7593      705        42        64         32
285     1169          76     307  7553      728        43        69         32
286     1369         104     237  7375      775        39        70         15
287      993          58     267  7743      773        41        62         44
288      980          53     254  7719      815        44        69         47
289      967          55     273  7692      833        45        63         47
290     1128          73     354  7527      728        44        76         38
291     1188          85     273  7445      814        44        73         42
292     1257          95     247  7405      812        43        70         35
293     1262          88     301  7471      704        43        71         31
294     1283         153     196  7107     1115        37        60         28
295     1263         155     199  7140     1148        31        42         18
296     1369         158     215  7160      958        38        69         32
297     1353         172     175  6965     1212        28        75         19
298     1187         139     185  7427      952        29        56         22
299     1732         231     156  6437     1313        45        62         23
300     1620         255     166  6628     1212        29        62         27
301     1543         172     193  6740     1157        52        87         34
302     1498         170     195  6804     1206        35        66         23
303     1399         169     171  7011     1100        36        72         16
304     1293         156     191  7101     1111        32        60         31
305     1420         175     152  7004     1149        27        50         20
306     1721         238     255  6300     1350        35        70         28
307     1742         221     156  6415     1315        43        82         23
308     1391         187     189  6975     1062        52        70         45
309     1517         206     249  6680     1205        33        80         27
310     1269         157     193  7140     1148        31        40         18
311     1577         204     208  6732     1183        20        52         20
312     1590         241     195  6705     1149        27        68         21
313     1621         280     197  6608     1179        28        58         27
314     1753         275     236  6367     1214        23        61         27
315     1679         260     177  6568     1191        30        59         33
316     1419         203     176  6973     1083        38        78         27
317     1693         236     174  6499     1204        51       102         37
318     1692         270     234  6499     1196        31        59         15
319     1638         252     215  6570     1199        39        53         29
320     1497         247     219  6621     1270        36        73         32
321     1442         222     194  6677     1314        36        72         38
322     1680         270     170  6440     1310        31        62         28
323     1463         164     185  6909     1154        49        58         17
324     1129         120     222  7272     1112        43        98          2
325     1042         135     210  7376     1116        35        90          3
326     1103          96     210  7380     1085        32        94          3
327     1118          97     221  7279     1154        35        94          2
328     1052          95     215  7388     1126        31        92          1
329     1116         102     231  7290     1168        26        66          1
330     1108         132     231  7319     1101        20        66          2
331     1129         108     212  7386     1074        28        62          3
332     1085          91     223  7384     1126        28        62          3
333     1104         103     233  7322     1147        27        61          2
334     1098          88     212  7338     1140        28        67          1
335     1135          98     251  7120     1314        20        61          2
336     1158         108     245  7065     1326        22        75          1
337     1133         110     241  7080     1342        21        68          3
338     1095         125     250  7120     1305        21        83          1
339     1201          87     238  6990     1383        25        75          3
340     1213         112     245  7007     1335        22        65          3
341     1108          92     231  7367     1110        29        62          3
342     1075         103     207  7413     1096        32        68          2
343     1059          96     228  7386     1128        25        72          2
344     1176          92     207  7347     1057        35        82          1
345     1159          98     213  7320     1108        38        64          1
346     1132          80     201  7398     1095        27        67          2
347     1107          75     220  7399     1096        29        90          1
348     1092         104     234  7355     1126        28        58          2
349     1119          81     219  7409     1057        33        81          2
350     1106          93     212  7381     1104        35        68          1
351     1047         101     238  7385     1120        28        89          1
352     1165          99     214  7331     1101        22        67          3
353     1158          84     201  7327     1123        29        77          2
354     1095          88     203  7415     1093        37        78          1
355     1176          75     205  7396     1107        33        74          2
356     1103         109     220  7335     1140        28        59          2
357     1112          92     209  7356     1125        32        73          2
358     1091          93     222  7377     1113        20        53          2
359     1080          98     219  7371     1125        33        78          1
360     1051         108     227  7403     1114        30        66          3
361     1096          84     211  7415     1091        30        71          2
362     1142          97     225  7341     1101        28        65          1
363     1047          96     236  7399     1107        32        80          3
364     1114          86     210  7359     1116        31        83          2
365     1140          93     241  7324     1098        23        74          1
366     1075          91     200  7410     1107        36        80          1
367     1092         106     219  7427     1125        33        77          1
368     1076          95     204  7408     1130        27        79          2
369     1178          89     201  7381     1099        34        87          2
370     1095         104     223  7367     1111        43        56          2
371     1166          97     272  6971     1390        20        83          3
372     1154         119     257  7130     1253        22        61          1
373     1177         111     241  6882     1470        22        95          2
374     1160          96     240  7043     1357        24        79          2
375     1122         104     241  7145     1313        15        58          1
376     1132          99     257  7065     1362        24        90          3
377     1096         100     260  7162     1282        25        74          2
378     1131          87     233  7144     1307        25        72          3
379     1184         105     258  7020     1340        26        66          2
380     1135          94     235  7123     1320        24        67          2
381     1084          96     240  7164     1330        28        57          1
382     1086         127     252  7159     1285        28        62          2
383     1140          95     258  7085     1347        23        71          3
384     1138         101     254  7103     1310        25        68          1
385     1159         110     261  7068     1297        27        77          2
386     1051          78     211  7421     1146        30        82          2
387     1048          79     213  7439     1130        28        61          2
388     1061          86     220  7421     1102        29        79          3
389     1105          88     210  7353     1142        28        72          1
390     1145          35     237  7208     1118        20        46          2
391     1049          96     219  7303     1168        22        47          2
392     1105         120     218  7302     1158        23        45          3
393     1030          84     214  7403     1177        21        70          1
394     1070          98     215  7280     1240        28        68          3
395     1103          81     208  7310     1177        30        90          3
396     1040         101     205  7368     1176        25        85          3
397     1100          95     210  7320     1113        22        72          3
398     1118          85     199  7415     1060        36        86          3
399     1065          98     230  7345     1163        24        74          1
400     1131          78     221  7358     1120        22        69          2
401     1080         120     218  7296     1145        35       105          2
402     1075          86     231  7403     1109        22        73          3
403     1040         103     228  7364     1173        25        66          2
404     1128          82     203  7320     1148        30        88          1
405     1060         111     231  7363     1149        20        65          1
406     1103          78     220  7365     1149        20        65          2
407     1110          91     201  7318     1185        24        74          2
408     1091         108     218  7383     1183        28        88          3
409     1094          96     220  7341     1127        26        96          2
410     1131          87     208  7170     1308        28        57          2
411     1175         108     214  7076     1307        33        85          2
412     1076          77     202  7243     1305        29        67          1
413     1120          90     240  7068     1383        23        75          1
414     1152         111     238  7080     1372        25        81          2
415     1141          95     250  7035     1388        22        68          2
416     1098         103     267  7135     1301        24        76          2
417     1126         100     236  7062     1380        26        69          1
418     1087          89     243  7200     1302        18        60          1
419     1115          96     236  7085     1372        20        75          2
420     1178          92     241  7006     1376        22        84          1
421     1162         106     242  7025     1368        25        71          2
422     1085          70     180  7955      605        20        50          1
423     1085          70     185  7955      600        25        55          1
424     1090          60     190  7950      600        28        47          2
425     1080          65     189  7960      602        35        20          1
426     1090          60     195  7955      600        28        42          2
427     1105          55     200  7900      600        37        55          2
428     1060          75     175  7975      610        20        55          2
429     1050          70     170  7977      605        28        65          1
430     1100          55     198  7905      600        35        50          3
431     1065          65     178  7965      605        22        65          2
432     1085          60     188  7955      602        30        50          2
433     1080          65     180  7960      605        25        55          1
434     1085          60     190  7955      602        30        53          1
435     1075          68     195  7960      602        20        40          3
436     1090          58     192  7950      600        35        40          3
437     1095          60     198  7945      600        38        34          2
438     1090          58     195  7950      600        30        42          2
439     1095          58     198  7950      602        35        32          1
440     1090          58     195  7940      600        35        42          2
441     1095          58     198  7945      600        35        34          1
442     1095          55     200  7940      600        35        45          3
443     1080          70     188  7965      608        28        36          3
444     1090          60     195  7950      600        32        38          2
445     1105          55     200  7900      595        39        56          1
446     1110          50     205  7900      595        40        52          1
447     1075          70     198  7978      608        28        33          2
448     1075          65     185  7980      608        35        42          3
449     1065          75     180  7975      610        25        50          3
450     1070          75     188  7980      602        22        45          2
451     1070          75     188  7980      602        22        45          1
452     1100          70     200  7910      610        39        44          1
453     1075          70     185  7960      610        22        58          2
454     1050          78     175  7990      610        18        59          3
455     1090          60     198  7945      600        32        35          2
456     1050          78     188  7990      608        28        23          3
457     1075          70     190  7975      605        28        27          3
458     1098          54     202  7945      595        42        32          2
459     1105          15     198  8005      575        52        20          2
460     1110          75     220  7915      510        55        65          2
461     1058          50     178  7988      626        40        55          3
462     1115          30     225  7955      600        55        15          2
463     1105          30     198  7995      570        52        20          3
464     1072          49     178  7980      615        48        48          2
465     1110          15     210  7990      570        50        20          2
466     1110          80     215  7910      525        50        60          1
467     1055          60     175  7985      620        45        50          1
468     1100          80     215  7930      535        45        60          2
469     1105          55     205  7965      600        25        20          2
470     1095          50     210  7948      600        25        35          2
471     1110          50     220  7950      600        52        10          2
472     1092          37     210  7955      600        40        40          3
473     1290          60     260  7550      670        70       100          2
474     1170          80     230  7690      720        40        70          1
475     1100          90     250  7680      760        30        80          2
476     1120          70     240  7720      730        40        80          2
477     1160          70     250  7650      750        30        90          1
478     1200          50     210  7770      690        20        50          3
479     1140          50     200  7990      580        10        20          1
480     1220          80     240  7610      760        30        60          2
481     1180          90     250  7520      800        50       100          2
482     1210          70     250  7560      780        40        90          2
483     1220          80     220  7540      770        60       100          2
484     1180         100     190  7520      820        50       100          1
485     1160          90     220  7580      790        40        90          1
486     1130         100     240  7620      780        30        90          1
487     1080         100     260  7710      750        20        70          2
488     1090          90     280  7730      720        50       100          1
489     1020         100     270  7770      710        40        90          1
490     1090          90     250  7680      760        60        80          1
491     1120         100     260  7720      680        30        80          2
492     1080          80     240  7830      670        30        70          2
493     1160          70     230  7860      640        10        20          1
494     1100          80     240  7820      670        20        70          2
495     1050         100     250  7930      630        10        30          3
496     1090          90     270  7780      690        30        50          3
497     1120          80     260  7750      680        30        80          3
498     1120         100     250  7680      730        40        70          2
499     1190          90     230  7670      710        30        80          2
500     1170         110     250  7620      740        20        90          1
501     1120         100     230  7720      730        20        70          1
502     1190          80     270  7690      720        10        40          2
503     1400          90     270  7420      800         0        20          2
504     1350          80     250  7520      760        10        30          1
505     1090          60     220  7890      670        10        60          2
506     1150          90     230  7790      650        30        60          1
507     1240          90     220  7820      590        10        30          1
508     1220         100     240  7890      530         0        10          2
509     1180          80     250  7870      580        10        30          2
510     1170         110     240  7730      630        30        90          1
511     1170         100     280  7710      640        20        70          3
512     1180          80     220  7790      680        10        40          1
513     1200          90     240  7820      590        10        50          2
514     1140          90     240  7880      570        20        60          3
515     1160          70     210  7870      580        30        80          3
516     1130          80     250  7780      650        40        60          3
517     1150          80     240  7800      630        30        70          2
518     1110          70     240  7820      670        20        70          3
519     1150          70     220  7850      620        20        40          2
520     1180          80     240  7760      670        20        50          2
521     1020          80     250  7920      680        10        30          3
522      610          80     230  8410      650         0        20          3
523     1190         150     290  7340     1020         0        10          2
524     1110         130     210  7550     1000         0         0          1
525     1020         100     220  7530     1030         0         0          3
526     1070         120     210  7600      990         0        10          3
527     1010          90     350  7480     1050        10        10          1
528     1060         140     240  7680      830        10        40          2
529     1060         140     270  7620      880        10        20          1
530     1030         100     230  7740      900         0         0          2
531     1120         130     250  7530      970         0         0          3
532     1030         110     220  7760      980         0         0          2
533     1070         100     230  7600      990        10         0          1
534     1140         180     220  7610      850        10        10          2
535     1090         180     230  7590      860        10        40          2
536      980         110     300  7720      910        10         0          3
537      980          90     330  7540     1040         0         0          2
538      960          90     200  7810      940         0         0          2
539      990          90     210  7780      930         0         0          2
540     1060         120     210  7600     1010         0         0          1
541     1240         150     250  7610      730        10        10          1
542     1060          90     310  7850      690         0         0          2
543     1020         100     290  7620      960         0        10          2
544      970          90     220  7700     1020         0         0          3
545     1180         130     220  7450     1010         0        10          2
546     1060         140     240  7690      850        10        10          1
547      990         100     250  7630     1030         0         0          3
548     1010          90     350  7630      940        10         0          3
549     1040          90     250  7780      820        10        10          1
550     1040          90     250  7810      810        10        10          2
551     1020          90     350  7620      920        10         0          3
552     1020          90     260  7620     1010         0         0          3
553     1010          90     350  7610      930        10         0          3
554      920         110     340  7720      910         0         0          3
555     1030         100     250  7710      900         0        10          2
556      960          90     300  7820      830         0         0          3
557     1030         110     210  7810      840         0         0          1
558     1010         100     240  7710      910        10        20          2
559     1020          90     240  7800      850         0         0          2
560     1120          90     300  7650      830         0        10          1
561     1090          90     290  7710      800        10         0          2
562     1100         120     280  7630      770        10        10          2
563     1090          80     240  7820      760        10         0          2
564     1150          90     250  7720      810         0        10          3
565     1110          90     230  7810      750         0        10          2
566     1010         110     210  7720      950         0         0          1
567     1070         100     220  7730      870        10        10          2
568     1280         110     290  7490      790        10        10          2
569     1060         100     270  7740      810        10        10          3
570     1010          90     210  7720      970         0         0          2
571      990         120     250  7750      870        10        10          2
572      960          80     240  7950      740        10        20          2
> m('grid')
                        x y
palmitic**palmitoleic   1 2
palmitic**stearic       1 3
palmitoleic**stearic    2 3
palmitic**oleic         1 4
palmitoleic**oleic      2 4
stearic**oleic          3 4
palmitic**linoleic      1 5
palmitoleic**linoleic   2 5
stearic**linoleic       3 5
oleic**linoleic         4 5
palmitic**linolenic     1 6
palmitoleic**linolenic  2 6
stearic**linolenic      3 6
oleic**linolenic        4 6
linoleic**linolenic     5 6
palmitic**arachidic     1 7
palmitoleic**arachidic  2 7
stearic**arachidic      3 7
oleic**arachidic        4 7
linoleic**arachidic     5 7
linolenic**arachidic    6 7
palmitic**eicosenoic    1 8
palmitoleic**eicosenoic 2 8
stearic**eicosenoic     3 8
oleic**eicosenoic       4 8
linoleic**eicosenoic    5 8
linolenic**eicosenoic   6 8
arachidic**eicosenoic   7 8
> m('measures')
[1] "Clumpy"    "Monotonic" "Convex"    "Stringy"   "Skinny"    "Outlying" 
[7] "Sparse"    "Striated"  "Skewed"   
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("scagnostics2d", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tkcolors")
> ### * tkcolors
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tkcolors
> ### Title: List the valid Tk color names
> ### Aliases: tkcolors
> 
> ### ** Examples
> 
> # check if R colors names and TK color names are the same
> setdiff(tolower(colors()), tolower(tkcolors()))
character(0)
> setdiff(tolower(tkcolors()), tolower(colors()))
 [1] "alice"      "antique"    "blanched"   "almond"     "cadet"     
 [6] "cornflower" "dark"       "olive"      "sea"        "slate"     
[11] "deep"       "sky"        "dim"        "dodger"     "floral"    
[16] "forest"     "ghost"      "hot"        "indian"     "blush"     
[21] "lawn"       "lemon"      "chiffon"    "light"      "steel"     
[26] "lime"       "medium"     "spring"     "midnight"   "mint"      
[31] "cream"      "misty"      "rose"       "navajo"     "old"       
[36] "lace"       "drab"       "pale"       "papaya"     "whip"      
[41] "peach"      "puff"       "powder"     "rosy"       "royal"     
[46] "saddle"     "sandy"      "smoke"     
>  
> # hence there are currently more valid color names in Tk than there are in R
> 
> # Lets compare the colors of the R color names in R and Tk
> tohex <- function(x) {
+     sapply(x, function(xi) {
+         crgb <- as.vector(col2rgb(xi))
+         rgb(crgb[1], crgb[2], crgb[3], maxColorValue = 255)    
+     })
+ }
> 
> df <- data.frame(
+     R_col = tohex(colors()),
+     Tcl_col = loon:::hex12tohex6(l_hexcolor(colors())),
+     row.names = colors(),
+     stringsAsFactors = FALSE
+ )
> 
> df_diff <- df[df$R_col != df$Tcl_col,]
> 
> library(grid)
> grid.newpage()
> pushViewport(plotViewport())
> 
> x_col <- unit(0, "npc")
> x_R <- unit(6, "lines")
> x_Tcl <- unit(10, "lines")
> 
> grid.text('color', x=x_col, y=unit(1, "npc"), just='left', gp=gpar(fontface='bold'))
> grid.text('R', x=x_R, y=unit(1, "npc"), just='center', gp=gpar(fontface='bold'))
> grid.text('Tcl', x=x_Tcl, y=unit(1, "npc"), just='center', gp=gpar(fontface='bold'))
> for (i in 1:nrow(df_diff)) {
+     y <- unit(1, "npc") - unit(i*1.2, "lines")
+     grid.text(rownames(df_diff)[i], x=x_col, y=y, just='left')
+     grid.rect(x=x_R, y=y, width=unit(3, "line"),
+               height=unit(1, "line"), gp=gpar(fill=df_diff[i,1]))
+     grid.rect(x=x_Tcl, y=y, width=unit(3, "line"),
+               height=unit(1, "line"), gp=gpar(fill=df_diff[i,2]))
+ }
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tkcolors", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  13.684 0.56 49.192 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
